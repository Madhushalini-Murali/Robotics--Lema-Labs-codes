
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000044  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000455  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000118  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004fa  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000dd  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000500  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
	ADCSRA=ADCSRA|(0b00000001<<ADEN);
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADPS2);
  6e:	32 9a       	sbi	0x06, 2	; 6
	ADMUX=ADMUX|(0b00000001<<REFS0);
  70:	3e 9a       	sbi	0x07, 6	; 7

}
  72:	08 95       	ret

00000074 <read_adc1>:

unsigned int read_adc1()
{
	int p=0b00000001;
	ADMUX=ADMUX&(0b11111000);
  74:	87 b1       	in	r24, 0x07	; 7
  76:	88 7f       	andi	r24, 0xF8	; 248
  78:	87 b9       	out	0x07, r24	; 7
	ADMUX=ADMUX|p;
  7a:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA=ADCSRA|(0b00000001<<ADSC);
  7c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(0b00000001<<ADIF))==0)
  7e:	34 9b       	sbis	0x06, 4	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <read_adc1+0xa>
	{}
	ADCSRA=ADCSRA|(0b00000001<<ADIF);
  82:	34 9a       	sbi	0x06, 4	; 6
	
	return(ADC);
  84:	24 b1       	in	r18, 0x04	; 4
  86:	35 b1       	in	r19, 0x05	; 5
}
  88:	c9 01       	movw	r24, r18
  8a:	08 95       	ret

0000008c <read_adc0>:

unsigned int read_adc0()
{
	int q=0b00000000;
	ADMUX=ADMUX&(0b11111000);
  8c:	87 b1       	in	r24, 0x07	; 7
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	87 b9       	out	0x07, r24	; 7
	ADMUX=ADMUX|q;
  92:	87 b1       	in	r24, 0x07	; 7
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA=ADCSRA|(0b00000001<<ADSC);
  96:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(0b00000001<<ADIF))==0)
  98:	34 9b       	sbis	0x06, 4	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <read_adc0+0xc>
	{}
	ADCSRA=ADCSRA|(0b00000001<<ADIF);
  9c:	34 9a       	sbi	0x06, 4	; 6
	
	return(ADC);
  9e:	24 b1       	in	r18, 0x04	; 4
  a0:	35 b1       	in	r19, 0x05	; 5
}
  a2:	c9 01       	movw	r24, r18
  a4:	08 95       	ret

000000a6 <main>:


void main()
{   DDRB=0b11111111;
  a6:	4f 92       	push	r4
  a8:	5f 92       	push	r5
  aa:	6f 92       	push	r6
  ac:	7f 92       	push	r7
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	87 bb       	out	0x17, r24	; 23
	init_adc();
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
		p=read_adc1();
		q=read_adc0();
		a=(p/40);
		T=25.6;
		TOFF=a;
		TON=T-TOFF;
  ce:	49 e1       	ldi	r20, 0x19	; 25
  d0:	84 2e       	mov	r8, r20
  d2:	91 2c       	mov	r9, r1
	

		if((q<=1024)&&(q>=756))
			{	PORTB=0b00001001;
  d4:	39 e0       	ldi	r19, 0x09	; 9
  d6:	73 2e       	mov	r7, r19
				_delay_ms(TON);
				PORTB=0b00000000;
				_delay_ms(TOFF);
			}
				else
			{	PORTB=0b00001010;
  d8:	2a e0       	ldi	r18, 0x0A	; 10
  da:	62 2e       	mov	r6, r18
				_delay_ms(TON);
				PORTB=0b00000000;
				_delay_ms(TOFF);
			}
				else if((q<512)&&(q>=256))
			{	PORTB=0b00000101;
  dc:	95 e0       	ldi	r25, 0x05	; 5
  de:	59 2e       	mov	r5, r25
				_delay_ms(TON);
				PORTB=0b00000000;
				_delay_ms(TOFF);
			}	
			else if((q<756)&&(q>=512))
			{	PORTB=0b00000110;
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	48 2e       	mov	r4, r24
	unsigned int TON;
	unsigned int TOFF;
	
	while(1)
	{
		p=read_adc1();
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <read_adc1>
  e8:	8c 01       	movw	r16, r24
		q=read_adc0();
  ea:	0e 94 46 00 	call	0x8c	; 0x8c <read_adc0>
  ee:	9c 01       	movw	r18, r24
		a=(p/40);
  f0:	c8 01       	movw	r24, r16
  f2:	68 e2       	ldi	r22, 0x28	; 40
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodhi4>
  fa:	eb 01       	movw	r28, r22
		T=25.6;
		TOFF=a;
		TON=T-TOFF;
  fc:	b4 01       	movw	r22, r8
  fe:	6c 1b       	sub	r22, r28
 100:	7d 0b       	sbc	r23, r29
	

		if((q<=1024)&&(q>=756))
 102:	c9 01       	movw	r24, r18
 104:	84 5f       	subi	r24, 0xF4	; 244
 106:	92 40       	sbci	r25, 0x02	; 2
 108:	8d 50       	subi	r24, 0x0D	; 13
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	08 f0       	brcs	.+2      	; 0x110 <main+0x6a>
 10e:	77 c0       	rjmp	.+238    	; 0x1fe <main+0x158>
			{	PORTB=0b00001001;
 110:	78 ba       	out	0x18, r7	; 24
				_delay_ms(TON);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 11a:	5b 01       	movw	r10, r22
 11c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	4a e7       	ldi	r20, 0x7A	; 122
 124:	53 e4       	ldi	r21, 0x43	; 67
 126:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 12a:	7b 01       	movw	r14, r22
 12c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	5f e3       	ldi	r21, 0x3F	; 63
 136:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 13a:	88 23       	and	r24, r24
 13c:	1c f4       	brge	.+6      	; 0x144 <main+0x9e>
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	22 c0       	rjmp	.+68     	; 0x188 <main+0xe2>
		__ticks = 1;
	else if (__tmp > 65535)
 144:	c8 01       	movw	r24, r16
 146:	b7 01       	movw	r22, r14
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	3f ef       	ldi	r19, 0xFF	; 255
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	57 e4       	ldi	r21, 0x47	; 71
 150:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 154:	18 16       	cp	r1, r24
 156:	a4 f4       	brge	.+40     	; 0x180 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 158:	c6 01       	movw	r24, r12
 15a:	b5 01       	movw	r22, r10
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e2       	ldi	r20, 0x20	; 32
 162:	51 e4       	ldi	r21, 0x41	; 65
 164:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 168:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 16c:	05 c0       	rjmp	.+10     	; 0x178 <main+0xd2>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16e:	c4 01       	movw	r24, r8
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0xca>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	61 50       	subi	r22, 0x01	; 1
 176:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	61 15       	cp	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	c1 f7       	brne	.-16     	; 0x16e <main+0xc8>
 17e:	07 c0       	rjmp	.+14     	; 0x18e <main+0xe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 180:	c8 01       	movw	r24, r16
 182:	b7 01       	movw	r22, r14
 184:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 188:	cb 01       	movw	r24, r22
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xe4>
				PORTB=0b00000000;
 18e:	18 ba       	out	0x18, r1	; 24
				_delay_ms(TOFF);
 190:	be 01       	movw	r22, r28
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 19a:	5b 01       	movw	r10, r22
 19c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	4a e7       	ldi	r20, 0x7A	; 122
 1a4:	53 e4       	ldi	r21, 0x43	; 67
 1a6:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 1aa:	7b 01       	movw	r14, r22
 1ac:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 1ba:	88 23       	and	r24, r24
 1bc:	0c f4       	brge	.+2      	; 0x1c0 <main+0x11a>
 1be:	70 c1       	rjmp	.+736    	; 0x4a0 <__stack+0x41>
		__ticks = 1;
	else if (__tmp > 65535)
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	3f ef       	ldi	r19, 0xFF	; 255
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	57 e4       	ldi	r21, 0x47	; 71
 1cc:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 1d0:	18 16       	cp	r1, r24
 1d2:	0c f0       	brlt	.+2      	; 0x1d6 <main+0x130>
 1d4:	86 c1       	rjmp	.+780    	; 0x4e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1d6:	c6 01       	movw	r24, r12
 1d8:	b5 01       	movw	r22, r10
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e2       	ldi	r20, 0x20	; 32
 1e0:	51 e4       	ldi	r21, 0x41	; 65
 1e2:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 1e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <main+0x150>
 1ec:	c4 01       	movw	r24, r8
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x148>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f2:	61 50       	subi	r22, 0x01	; 1
 1f4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f6:	61 15       	cp	r22, r1
 1f8:	71 05       	cpc	r23, r1
 1fa:	c1 f7       	brne	.-16     	; 0x1ec <main+0x146>
 1fc:	73 cf       	rjmp	.-282    	; 0xe4 <main+0x3e>
			}	
			else if((q<756)&&(q>=512))
 1fe:	c9 01       	movw	r24, r18
 200:	80 50       	subi	r24, 0x00	; 0
 202:	92 40       	sbci	r25, 0x02	; 2
 204:	84 3f       	cpi	r24, 0xF4	; 244
 206:	91 05       	cpc	r25, r1
 208:	08 f0       	brcs	.+2      	; 0x20c <main+0x166>
 20a:	77 c0       	rjmp	.+238    	; 0x2fa <main+0x254>
			{	PORTB=0b00000110;
 20c:	48 ba       	out	0x18, r4	; 24
				_delay_ms(TON);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 216:	5b 01       	movw	r10, r22
 218:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	4a e7       	ldi	r20, 0x7A	; 122
 220:	53 e4       	ldi	r21, 0x43	; 67
 222:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 226:	7b 01       	movw	r14, r22
 228:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e8       	ldi	r20, 0x80	; 128
 230:	5f e3       	ldi	r21, 0x3F	; 63
 232:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 236:	88 23       	and	r24, r24
 238:	1c f4       	brge	.+6      	; 0x240 <main+0x19a>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	22 c0       	rjmp	.+68     	; 0x284 <main+0x1de>
		__ticks = 1;
	else if (__tmp > 65535)
 240:	c8 01       	movw	r24, r16
 242:	b7 01       	movw	r22, r14
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	3f ef       	ldi	r19, 0xFF	; 255
 248:	4f e7       	ldi	r20, 0x7F	; 127
 24a:	57 e4       	ldi	r21, 0x47	; 71
 24c:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 250:	18 16       	cp	r1, r24
 252:	a4 f4       	brge	.+40     	; 0x27c <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 254:	c6 01       	movw	r24, r12
 256:	b5 01       	movw	r22, r10
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e2       	ldi	r20, 0x20	; 32
 25e:	51 e4       	ldi	r21, 0x41	; 65
 260:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 264:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 268:	05 c0       	rjmp	.+10     	; 0x274 <main+0x1ce>
 26a:	c4 01       	movw	r24, r8
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x1c6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 270:	61 50       	subi	r22, 0x01	; 1
 272:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	61 15       	cp	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	c1 f7       	brne	.-16     	; 0x26a <main+0x1c4>
 27a:	07 c0       	rjmp	.+14     	; 0x28a <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 27c:	c8 01       	movw	r24, r16
 27e:	b7 01       	movw	r22, r14
 280:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 284:	cb 01       	movw	r24, r22
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x1e0>
				PORTB=0b00000000;
 28a:	18 ba       	out	0x18, r1	; 24
				_delay_ms(TOFF);
 28c:	be 01       	movw	r22, r28
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 296:	5b 01       	movw	r10, r22
 298:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	4a e7       	ldi	r20, 0x7A	; 122
 2a0:	53 e4       	ldi	r21, 0x43	; 67
 2a2:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 2a6:	7b 01       	movw	r14, r22
 2a8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 2b6:	88 23       	and	r24, r24
 2b8:	0c f4       	brge	.+2      	; 0x2bc <main+0x216>
 2ba:	f2 c0       	rjmp	.+484    	; 0x4a0 <__stack+0x41>
		__ticks = 1;
	else if (__tmp > 65535)
 2bc:	c8 01       	movw	r24, r16
 2be:	b7 01       	movw	r22, r14
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	3f ef       	ldi	r19, 0xFF	; 255
 2c4:	4f e7       	ldi	r20, 0x7F	; 127
 2c6:	57 e4       	ldi	r21, 0x47	; 71
 2c8:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 2cc:	18 16       	cp	r1, r24
 2ce:	0c f0       	brlt	.+2      	; 0x2d2 <main+0x22c>
 2d0:	08 c1       	rjmp	.+528    	; 0x4e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d2:	c6 01       	movw	r24, r12
 2d4:	b5 01       	movw	r22, r10
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e2       	ldi	r20, 0x20	; 32
 2dc:	51 e4       	ldi	r21, 0x41	; 65
 2de:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 2e2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <main+0x24c>
 2e8:	c4 01       	movw	r24, r8
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x244>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ee:	61 50       	subi	r22, 0x01	; 1
 2f0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	61 15       	cp	r22, r1
 2f4:	71 05       	cpc	r23, r1
 2f6:	c1 f7       	brne	.-16     	; 0x2e8 <main+0x242>
 2f8:	f5 ce       	rjmp	.-534    	; 0xe4 <main+0x3e>
			}
				else if((q<512)&&(q>=256))
 2fa:	20 50       	subi	r18, 0x00	; 0
 2fc:	31 40       	sbci	r19, 0x01	; 1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2f 3f       	cpi	r18, 0xFF	; 255
 304:	31 05       	cpc	r19, r1
 306:	11 f0       	breq	.+4      	; 0x30c <main+0x266>
 308:	08 f0       	brcs	.+2      	; 0x30c <main+0x266>
 30a:	75 c0       	rjmp	.+234    	; 0x3f6 <main+0x350>
			{	PORTB=0b00000101;
 30c:	58 ba       	out	0x18, r5	; 24
				_delay_ms(TON);
 30e:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 312:	5b 01       	movw	r10, r22
 314:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	4a e7       	ldi	r20, 0x7A	; 122
 31c:	53 e4       	ldi	r21, 0x43	; 67
 31e:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 322:	7b 01       	movw	r14, r22
 324:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e8       	ldi	r20, 0x80	; 128
 32c:	5f e3       	ldi	r21, 0x3F	; 63
 32e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 332:	88 23       	and	r24, r24
 334:	1c f4       	brge	.+6      	; 0x33c <main+0x296>
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	22 c0       	rjmp	.+68     	; 0x380 <main+0x2da>
		__ticks = 1;
	else if (__tmp > 65535)
 33c:	c8 01       	movw	r24, r16
 33e:	b7 01       	movw	r22, r14
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	3f ef       	ldi	r19, 0xFF	; 255
 344:	4f e7       	ldi	r20, 0x7F	; 127
 346:	57 e4       	ldi	r21, 0x47	; 71
 348:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 34c:	18 16       	cp	r1, r24
 34e:	a4 f4       	brge	.+40     	; 0x378 <main+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 350:	c6 01       	movw	r24, r12
 352:	b5 01       	movw	r22, r10
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e2       	ldi	r20, 0x20	; 32
 35a:	51 e4       	ldi	r21, 0x41	; 65
 35c:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 360:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 364:	05 c0       	rjmp	.+10     	; 0x370 <main+0x2ca>
 366:	c4 01       	movw	r24, r8
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x2c2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36c:	61 50       	subi	r22, 0x01	; 1
 36e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	c1 f7       	brne	.-16     	; 0x366 <main+0x2c0>
 376:	07 c0       	rjmp	.+14     	; 0x386 <main+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 378:	c8 01       	movw	r24, r16
 37a:	b7 01       	movw	r22, r14
 37c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 380:	cb 01       	movw	r24, r22
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x2dc>
				PORTB=0b00000000;
 386:	18 ba       	out	0x18, r1	; 24
				_delay_ms(TOFF);
 388:	be 01       	movw	r22, r28
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 392:	5b 01       	movw	r10, r22
 394:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4a e7       	ldi	r20, 0x7A	; 122
 39c:	53 e4       	ldi	r21, 0x43	; 67
 39e:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 3a2:	7b 01       	movw	r14, r22
 3a4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e8       	ldi	r20, 0x80	; 128
 3ac:	5f e3       	ldi	r21, 0x3F	; 63
 3ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 3b2:	88 23       	and	r24, r24
 3b4:	0c f4       	brge	.+2      	; 0x3b8 <main+0x312>
 3b6:	74 c0       	rjmp	.+232    	; 0x4a0 <__stack+0x41>
		__ticks = 1;
	else if (__tmp > 65535)
 3b8:	c8 01       	movw	r24, r16
 3ba:	b7 01       	movw	r22, r14
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	3f ef       	ldi	r19, 0xFF	; 255
 3c0:	4f e7       	ldi	r20, 0x7F	; 127
 3c2:	57 e4       	ldi	r21, 0x47	; 71
 3c4:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 3c8:	18 16       	cp	r1, r24
 3ca:	0c f0       	brlt	.+2      	; 0x3ce <main+0x328>
 3cc:	8a c0       	rjmp	.+276    	; 0x4e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3ce:	c6 01       	movw	r24, r12
 3d0:	b5 01       	movw	r22, r10
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e2       	ldi	r20, 0x20	; 32
 3d8:	51 e4       	ldi	r21, 0x41	; 65
 3da:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 3de:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <main+0x348>
 3e4:	c4 01       	movw	r24, r8
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <main+0x340>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ea:	61 50       	subi	r22, 0x01	; 1
 3ec:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	c1 f7       	brne	.-16     	; 0x3e4 <main+0x33e>
 3f4:	77 ce       	rjmp	.-786    	; 0xe4 <main+0x3e>
			}
				else
			{	PORTB=0b00001010;
 3f6:	68 ba       	out	0x18, r6	; 24
				_delay_ms(TON);
 3f8:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 3fc:	5b 01       	movw	r10, r22
 3fe:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	4a e7       	ldi	r20, 0x7A	; 122
 406:	53 e4       	ldi	r21, 0x43	; 67
 408:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 40c:	7b 01       	movw	r14, r22
 40e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e8       	ldi	r20, 0x80	; 128
 416:	5f e3       	ldi	r21, 0x3F	; 63
 418:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 41c:	88 23       	and	r24, r24
 41e:	1c f4       	brge	.+6      	; 0x426 <main+0x380>
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	22 c0       	rjmp	.+68     	; 0x46a <__stack+0xb>
		__ticks = 1;
	else if (__tmp > 65535)
 426:	c8 01       	movw	r24, r16
 428:	b7 01       	movw	r22, r14
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	3f ef       	ldi	r19, 0xFF	; 255
 42e:	4f e7       	ldi	r20, 0x7F	; 127
 430:	57 e4       	ldi	r21, 0x47	; 71
 432:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 436:	18 16       	cp	r1, r24
 438:	a4 f4       	brge	.+40     	; 0x462 <__stack+0x3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 43a:	c6 01       	movw	r24, r12
 43c:	b5 01       	movw	r22, r10
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	40 e2       	ldi	r20, 0x20	; 32
 444:	51 e4       	ldi	r21, 0x41	; 65
 446:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 44a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 44e:	05 c0       	rjmp	.+10     	; 0x45a <main+0x3b4>
 450:	c4 01       	movw	r24, r8
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <main+0x3ac>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 456:	61 50       	subi	r22, 0x01	; 1
 458:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	61 15       	cp	r22, r1
 45c:	71 05       	cpc	r23, r1
 45e:	c1 f7       	brne	.-16     	; 0x450 <main+0x3aa>
 460:	07 c0       	rjmp	.+14     	; 0x470 <__stack+0x11>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 462:	c8 01       	movw	r24, r16
 464:	b7 01       	movw	r22, r14
 466:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 46a:	cb 01       	movw	r24, r22
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
				PORTB=0b00000000;
 470:	18 ba       	out	0x18, r1	; 24
				_delay_ms(TOFF);
 472:	be 01       	movw	r22, r28
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 a9 02 	call	0x552	; 0x552 <__floatunsisf>
 47c:	5b 01       	movw	r10, r22
 47e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	4a e7       	ldi	r20, 0x7A	; 122
 486:	53 e4       	ldi	r21, 0x43	; 67
 488:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 48c:	7b 01       	movw	r14, r22
 48e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e8       	ldi	r20, 0x80	; 128
 496:	5f e3       	ldi	r21, 0x3F	; 63
 498:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpsf2>
 49c:	88 23       	and	r24, r24
 49e:	1c f4       	brge	.+6      	; 0x4a6 <__stack+0x47>
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	22 c0       	rjmp	.+68     	; 0x4ea <__stack+0x8b>
		__ticks = 1;
	else if (__tmp > 65535)
 4a6:	c8 01       	movw	r24, r16
 4a8:	b7 01       	movw	r22, r14
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	3f ef       	ldi	r19, 0xFF	; 255
 4ae:	4f e7       	ldi	r20, 0x7F	; 127
 4b0:	57 e4       	ldi	r21, 0x47	; 71
 4b2:	0e 94 33 03 	call	0x666	; 0x666 <__gesf2>
 4b6:	18 16       	cp	r1, r24
 4b8:	a4 f4       	brge	.+40     	; 0x4e2 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ba:	c6 01       	movw	r24, r12
 4bc:	b5 01       	movw	r22, r10
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 e2       	ldi	r20, 0x20	; 32
 4c4:	51 e4       	ldi	r21, 0x41	; 65
 4c6:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3>
 4ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__stack+0x7b>
 4d0:	c4 01       	movw	r24, r8
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__stack+0x73>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4d6:	61 50       	subi	r22, 0x01	; 1
 4d8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	c1 f7       	brne	.-16     	; 0x4d0 <__stack+0x71>
 4e0:	01 ce       	rjmp	.-1022   	; 0xe4 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4e2:	c8 01       	movw	r24, r16
 4e4:	b7 01       	movw	r22, r14
 4e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fixunssfsi>
 4ea:	cb 01       	movw	r24, r22
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__stack+0x8d>
 4f0:	f9 cd       	rjmp	.-1038   	; 0xe4 <main+0x3e>

000004f2 <__cmpsf2>:
 4f2:	6c d0       	rcall	.+216    	; 0x5cc <__fp_cmp>
 4f4:	08 f4       	brcc	.+2      	; 0x4f8 <__cmpsf2+0x6>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret

000004fa <__fixunssfsi>:
 4fa:	94 d0       	rcall	.+296    	; 0x624 <__fp_splitA>
 4fc:	88 f0       	brcs	.+34     	; 0x520 <__fixunssfsi+0x26>
 4fe:	9f 57       	subi	r25, 0x7F	; 127
 500:	90 f0       	brcs	.+36     	; 0x526 <__fixunssfsi+0x2c>
 502:	b9 2f       	mov	r27, r25
 504:	99 27       	eor	r25, r25
 506:	b7 51       	subi	r27, 0x17	; 23
 508:	a0 f0       	brcs	.+40     	; 0x532 <__fixunssfsi+0x38>
 50a:	d1 f0       	breq	.+52     	; 0x540 <__fixunssfsi+0x46>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	1a f0       	brmi	.+6      	; 0x51c <__fixunssfsi+0x22>
 516:	ba 95       	dec	r27
 518:	c9 f7       	brne	.-14     	; 0x50c <__fixunssfsi+0x12>
 51a:	12 c0       	rjmp	.+36     	; 0x540 <__fixunssfsi+0x46>
 51c:	b1 30       	cpi	r27, 0x01	; 1
 51e:	81 f0       	breq	.+32     	; 0x540 <__fixunssfsi+0x46>
 520:	9b d0       	rcall	.+310    	; 0x658 <__fp_zero>
 522:	b1 e0       	ldi	r27, 0x01	; 1
 524:	08 95       	ret
 526:	98 c0       	rjmp	.+304    	; 0x658 <__fp_zero>
 528:	67 2f       	mov	r22, r23
 52a:	78 2f       	mov	r23, r24
 52c:	88 27       	eor	r24, r24
 52e:	b8 5f       	subi	r27, 0xF8	; 248
 530:	39 f0       	breq	.+14     	; 0x540 <__fixunssfsi+0x46>
 532:	b9 3f       	cpi	r27, 0xF9	; 249
 534:	cc f3       	brlt	.-14     	; 0x528 <__fixunssfsi+0x2e>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b3 95       	inc	r27
 53e:	d9 f7       	brne	.-10     	; 0x536 <__fixunssfsi+0x3c>
 540:	3e f4       	brtc	.+14     	; 0x550 <__fixunssfsi+0x56>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__floatunsisf>:
 552:	e8 94       	clt
 554:	09 c0       	rjmp	.+18     	; 0x568 <__floatsisf+0x12>

00000556 <__floatsisf>:
 556:	97 fb       	bst	r25, 7
 558:	3e f4       	brtc	.+14     	; 0x568 <__floatsisf+0x12>
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	99 23       	and	r25, r25
 56a:	a9 f0       	breq	.+42     	; 0x596 <__floatsisf+0x40>
 56c:	f9 2f       	mov	r31, r25
 56e:	96 e9       	ldi	r25, 0x96	; 150
 570:	bb 27       	eor	r27, r27
 572:	93 95       	inc	r25
 574:	f6 95       	lsr	r31
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f1 11       	cpse	r31, r1
 580:	f8 cf       	rjmp	.-16     	; 0x572 <__floatsisf+0x1c>
 582:	fa f4       	brpl	.+62     	; 0x5c2 <__floatsisf+0x6c>
 584:	bb 0f       	add	r27, r27
 586:	11 f4       	brne	.+4      	; 0x58c <__floatsisf+0x36>
 588:	60 ff       	sbrs	r22, 0
 58a:	1b c0       	rjmp	.+54     	; 0x5c2 <__floatsisf+0x6c>
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	16 c0       	rjmp	.+44     	; 0x5c2 <__floatsisf+0x6c>
 596:	88 23       	and	r24, r24
 598:	11 f0       	breq	.+4      	; 0x59e <__floatsisf+0x48>
 59a:	96 e9       	ldi	r25, 0x96	; 150
 59c:	11 c0       	rjmp	.+34     	; 0x5c0 <__floatsisf+0x6a>
 59e:	77 23       	and	r23, r23
 5a0:	21 f0       	breq	.+8      	; 0x5aa <__floatsisf+0x54>
 5a2:	9e e8       	ldi	r25, 0x8E	; 142
 5a4:	87 2f       	mov	r24, r23
 5a6:	76 2f       	mov	r23, r22
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <__floatsisf+0x5e>
 5aa:	66 23       	and	r22, r22
 5ac:	71 f0       	breq	.+28     	; 0x5ca <__floatsisf+0x74>
 5ae:	96 e8       	ldi	r25, 0x86	; 134
 5b0:	86 2f       	mov	r24, r22
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	2a f0       	brmi	.+10     	; 0x5c2 <__floatsisf+0x6c>
 5b8:	9a 95       	dec	r25
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	da f7       	brpl	.-10     	; 0x5b8 <__floatsisf+0x62>
 5c2:	88 0f       	add	r24, r24
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret

000005cc <__fp_cmp>:
 5cc:	99 0f       	add	r25, r25
 5ce:	00 08       	sbc	r0, r0
 5d0:	55 0f       	add	r21, r21
 5d2:	aa 0b       	sbc	r26, r26
 5d4:	e0 e8       	ldi	r30, 0x80	; 128
 5d6:	fe ef       	ldi	r31, 0xFE	; 254
 5d8:	16 16       	cp	r1, r22
 5da:	17 06       	cpc	r1, r23
 5dc:	e8 07       	cpc	r30, r24
 5de:	f9 07       	cpc	r31, r25
 5e0:	c0 f0       	brcs	.+48     	; 0x612 <__fp_cmp+0x46>
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	e4 07       	cpc	r30, r20
 5e8:	f5 07       	cpc	r31, r21
 5ea:	98 f0       	brcs	.+38     	; 0x612 <__fp_cmp+0x46>
 5ec:	62 1b       	sub	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	95 0b       	sbc	r25, r21
 5f4:	39 f4       	brne	.+14     	; 0x604 <__fp_cmp+0x38>
 5f6:	0a 26       	eor	r0, r26
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_cmp+0x46>
 5fa:	23 2b       	or	r18, r19
 5fc:	24 2b       	or	r18, r20
 5fe:	25 2b       	or	r18, r21
 600:	21 f4       	brne	.+8      	; 0x60a <__fp_cmp+0x3e>
 602:	08 95       	ret
 604:	0a 26       	eor	r0, r26
 606:	09 f4       	brne	.+2      	; 0x60a <__fp_cmp+0x3e>
 608:	a1 40       	sbci	r26, 0x01	; 1
 60a:	a6 95       	lsr	r26
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	81 1d       	adc	r24, r1
 610:	81 1d       	adc	r24, r1
 612:	08 95       	ret

00000614 <__fp_split3>:
 614:	57 fd       	sbrc	r21, 7
 616:	90 58       	subi	r25, 0x80	; 128
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	59 f0       	breq	.+22     	; 0x634 <__fp_splitA+0x10>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	71 f0       	breq	.+28     	; 0x63e <__fp_splitA+0x1a>
 622:	47 95       	ror	r20

00000624 <__fp_splitA>:
 624:	88 0f       	add	r24, r24
 626:	97 fb       	bst	r25, 7
 628:	99 1f       	adc	r25, r25
 62a:	61 f0       	breq	.+24     	; 0x644 <__fp_splitA+0x20>
 62c:	9f 3f       	cpi	r25, 0xFF	; 255
 62e:	79 f0       	breq	.+30     	; 0x64e <__fp_splitA+0x2a>
 630:	87 95       	ror	r24
 632:	08 95       	ret
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	55 1f       	adc	r21, r21
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <__fp_split3+0xe>
 63e:	46 95       	lsr	r20
 640:	f1 df       	rcall	.-30     	; 0x624 <__fp_splitA>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__fp_splitA+0x30>
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	18 06       	cpc	r1, r24
 64a:	99 1f       	adc	r25, r25
 64c:	f1 cf       	rjmp	.-30     	; 0x630 <__fp_splitA+0xc>
 64e:	86 95       	lsr	r24
 650:	71 05       	cpc	r23, r1
 652:	61 05       	cpc	r22, r1
 654:	08 94       	sec
 656:	08 95       	ret

00000658 <__fp_zero>:
 658:	e8 94       	clt

0000065a <__fp_szero>:
 65a:	bb 27       	eor	r27, r27
 65c:	66 27       	eor	r22, r22
 65e:	77 27       	eor	r23, r23
 660:	cb 01       	movw	r24, r22
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__gesf2>:
 666:	b2 df       	rcall	.-156    	; 0x5cc <__fp_cmp>
 668:	08 f4       	brcc	.+2      	; 0x66c <__gesf2+0x6>
 66a:	8f ef       	ldi	r24, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__mulsf3>:
 66e:	0b d0       	rcall	.+22     	; 0x686 <__mulsf3x>
 670:	78 c0       	rjmp	.+240    	; 0x762 <__fp_round>
 672:	69 d0       	rcall	.+210    	; 0x746 <__fp_pscA>
 674:	28 f0       	brcs	.+10     	; 0x680 <__mulsf3+0x12>
 676:	6e d0       	rcall	.+220    	; 0x754 <__fp_pscB>
 678:	18 f0       	brcs	.+6      	; 0x680 <__mulsf3+0x12>
 67a:	95 23       	and	r25, r21
 67c:	09 f0       	breq	.+2      	; 0x680 <__mulsf3+0x12>
 67e:	5a c0       	rjmp	.+180    	; 0x734 <__fp_inf>
 680:	5f c0       	rjmp	.+190    	; 0x740 <__fp_nan>
 682:	11 24       	eor	r1, r1
 684:	ea cf       	rjmp	.-44     	; 0x65a <__fp_szero>

00000686 <__mulsf3x>:
 686:	c6 df       	rcall	.-116    	; 0x614 <__fp_split3>
 688:	a0 f3       	brcs	.-24     	; 0x672 <__mulsf3+0x4>

0000068a <__mulsf3_pse>:
 68a:	95 9f       	mul	r25, r21
 68c:	d1 f3       	breq	.-12     	; 0x682 <__mulsf3+0x14>
 68e:	95 0f       	add	r25, r21
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	55 1f       	adc	r21, r21
 694:	62 9f       	mul	r22, r18
 696:	f0 01       	movw	r30, r0
 698:	72 9f       	mul	r23, r18
 69a:	bb 27       	eor	r27, r27
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	63 9f       	mul	r22, r19
 6a2:	aa 27       	eor	r26, r26
 6a4:	f0 0d       	add	r31, r0
 6a6:	b1 1d       	adc	r27, r1
 6a8:	aa 1f       	adc	r26, r26
 6aa:	64 9f       	mul	r22, r20
 6ac:	66 27       	eor	r22, r22
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	66 1f       	adc	r22, r22
 6b4:	82 9f       	mul	r24, r18
 6b6:	22 27       	eor	r18, r18
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	73 9f       	mul	r23, r19
 6c0:	b0 0d       	add	r27, r0
 6c2:	a1 1d       	adc	r26, r1
 6c4:	62 1f       	adc	r22, r18
 6c6:	83 9f       	mul	r24, r19
 6c8:	a0 0d       	add	r26, r0
 6ca:	61 1d       	adc	r22, r1
 6cc:	22 1f       	adc	r18, r18
 6ce:	74 9f       	mul	r23, r20
 6d0:	33 27       	eor	r19, r19
 6d2:	a0 0d       	add	r26, r0
 6d4:	61 1d       	adc	r22, r1
 6d6:	23 1f       	adc	r18, r19
 6d8:	84 9f       	mul	r24, r20
 6da:	60 0d       	add	r22, r0
 6dc:	21 1d       	adc	r18, r1
 6de:	82 2f       	mov	r24, r18
 6e0:	76 2f       	mov	r23, r22
 6e2:	6a 2f       	mov	r22, r26
 6e4:	11 24       	eor	r1, r1
 6e6:	9f 57       	subi	r25, 0x7F	; 127
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	8a f0       	brmi	.+34     	; 0x70e <__mulsf3_pse+0x84>
 6ec:	e1 f0       	breq	.+56     	; 0x726 <__mulsf3_pse+0x9c>
 6ee:	88 23       	and	r24, r24
 6f0:	4a f0       	brmi	.+18     	; 0x704 <__mulsf3_pse+0x7a>
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	bb 1f       	adc	r27, r27
 6f8:	66 1f       	adc	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	91 50       	subi	r25, 0x01	; 1
 700:	50 40       	sbci	r21, 0x00	; 0
 702:	a9 f7       	brne	.-22     	; 0x6ee <__mulsf3_pse+0x64>
 704:	9e 3f       	cpi	r25, 0xFE	; 254
 706:	51 05       	cpc	r21, r1
 708:	70 f0       	brcs	.+28     	; 0x726 <__mulsf3_pse+0x9c>
 70a:	14 c0       	rjmp	.+40     	; 0x734 <__fp_inf>
 70c:	a6 cf       	rjmp	.-180    	; 0x65a <__fp_szero>
 70e:	5f 3f       	cpi	r21, 0xFF	; 255
 710:	ec f3       	brlt	.-6      	; 0x70c <__mulsf3_pse+0x82>
 712:	98 3e       	cpi	r25, 0xE8	; 232
 714:	dc f3       	brlt	.-10     	; 0x70c <__mulsf3_pse+0x82>
 716:	86 95       	lsr	r24
 718:	77 95       	ror	r23
 71a:	67 95       	ror	r22
 71c:	b7 95       	ror	r27
 71e:	f7 95       	ror	r31
 720:	e7 95       	ror	r30
 722:	9f 5f       	subi	r25, 0xFF	; 255
 724:	c1 f7       	brne	.-16     	; 0x716 <__mulsf3_pse+0x8c>
 726:	fe 2b       	or	r31, r30
 728:	88 0f       	add	r24, r24
 72a:	91 1d       	adc	r25, r1
 72c:	96 95       	lsr	r25
 72e:	87 95       	ror	r24
 730:	97 f9       	bld	r25, 7
 732:	08 95       	ret

00000734 <__fp_inf>:
 734:	97 f9       	bld	r25, 7
 736:	9f 67       	ori	r25, 0x7F	; 127
 738:	80 e8       	ldi	r24, 0x80	; 128
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	08 95       	ret

00000740 <__fp_nan>:
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	80 ec       	ldi	r24, 0xC0	; 192
 744:	08 95       	ret

00000746 <__fp_pscA>:
 746:	00 24       	eor	r0, r0
 748:	0a 94       	dec	r0
 74a:	16 16       	cp	r1, r22
 74c:	17 06       	cpc	r1, r23
 74e:	18 06       	cpc	r1, r24
 750:	09 06       	cpc	r0, r25
 752:	08 95       	ret

00000754 <__fp_pscB>:
 754:	00 24       	eor	r0, r0
 756:	0a 94       	dec	r0
 758:	12 16       	cp	r1, r18
 75a:	13 06       	cpc	r1, r19
 75c:	14 06       	cpc	r1, r20
 75e:	05 06       	cpc	r0, r21
 760:	08 95       	ret

00000762 <__fp_round>:
 762:	09 2e       	mov	r0, r25
 764:	03 94       	inc	r0
 766:	00 0c       	add	r0, r0
 768:	11 f4       	brne	.+4      	; 0x76e <__fp_round+0xc>
 76a:	88 23       	and	r24, r24
 76c:	52 f0       	brmi	.+20     	; 0x782 <__fp_round+0x20>
 76e:	bb 0f       	add	r27, r27
 770:	40 f4       	brcc	.+16     	; 0x782 <__fp_round+0x20>
 772:	bf 2b       	or	r27, r31
 774:	11 f4       	brne	.+4      	; 0x77a <__fp_round+0x18>
 776:	60 ff       	sbrs	r22, 0
 778:	04 c0       	rjmp	.+8      	; 0x782 <__fp_round+0x20>
 77a:	6f 5f       	subi	r22, 0xFF	; 255
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	8f 4f       	sbci	r24, 0xFF	; 255
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	08 95       	ret

00000784 <__udivmodhi4>:
 784:	aa 1b       	sub	r26, r26
 786:	bb 1b       	sub	r27, r27
 788:	51 e1       	ldi	r21, 0x11	; 17
 78a:	07 c0       	rjmp	.+14     	; 0x79a <__udivmodhi4_ep>

0000078c <__udivmodhi4_loop>:
 78c:	aa 1f       	adc	r26, r26
 78e:	bb 1f       	adc	r27, r27
 790:	a6 17       	cp	r26, r22
 792:	b7 07       	cpc	r27, r23
 794:	10 f0       	brcs	.+4      	; 0x79a <__udivmodhi4_ep>
 796:	a6 1b       	sub	r26, r22
 798:	b7 0b       	sbc	r27, r23

0000079a <__udivmodhi4_ep>:
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	5a 95       	dec	r21
 7a0:	a9 f7       	brne	.-22     	; 0x78c <__udivmodhi4_loop>
 7a2:	80 95       	com	r24
 7a4:	90 95       	com	r25
 7a6:	bc 01       	movw	r22, r24
 7a8:	cd 01       	movw	r24, r26
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
