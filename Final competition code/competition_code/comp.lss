
comp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c12  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000038  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007b1  00000000  00000000  00000cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000123  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000008a8  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000db  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000d38  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_adc>:
#include<avr/io.h>
#include<util/delay.h>

void init_adc()
{
	ADCSRA=ADCSRA|(0b00000001<<ADEN); // Enable ADC
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADPS2);//Sampling rate select
  6e:	32 9a       	sbi	0x06, 2	; 6
	ADMUX|=(0b00000001<<REFS0);// Voltage reference
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <readpot_adc>:

int readpot_adc()
{
	int p=0b00000000; // pot connected to ADC0
	ADMUX=ADMUX|p; // Input pin
  74:	87 b1       	in	r24, 0x07	; 7
  76:	87 b9       	out	0x07, r24	; 7
	ADCSRA=ADCSRA|(0b00000001<<ADSC); //Start of Conversion
  78:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(0b00000001<<ADIF)==0); // Until conversion stops
  7a:	86 b1       	in	r24, 0x06	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADIF);// Clearing ADIF pin
  7c:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  7e:	24 b1       	in	r18, 0x04	; 4
  80:	35 b1       	in	r19, 0x05	; 5
}	
  82:	c9 01       	movw	r24, r18
  84:	08 95       	ret

00000086 <main>:
	
void main()
{
  86:	2f 92       	push	r2
  88:	3f 92       	push	r3
  8a:	4f 92       	push	r4
  8c:	5f 92       	push	r5
  8e:	6f 92       	push	r6
  90:	7f 92       	push	r7
  92:	8f 92       	push	r8
  94:	9f 92       	push	r9
  96:	af 92       	push	r10
  98:	bf 92       	push	r11
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	DDRD=0b00000000; // port D input, sensors. right and left- line, middle-obstacle, another-cave.
  aa:	11 ba       	out	0x11, r1	; 17
	DDRB=0b11111111; //output, motor and buzzer
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	PORTD=0b11111111; // port D pull-up
  b0:	82 bb       	out	0x12, r24	; 18
	init_adc(); //initialising ADC0
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <init_adc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	84 ed       	ldi	r24, 0xD4	; 212
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x34>
	{   
	    p=readpot_adc(); // reads pot;s analog value, converts it, and returns digital value to p
		a=p/40; // scaling factor 40
		T=25.6; // scaled value of max time 1024 (# of quantisation levels)
		TOFF=a; 
		TON=T-TOFF;
  be:	29 e1       	ldi	r18, 0x19	; 25
  c0:	62 2e       	mov	r6, r18
  c2:	71 2c       	mov	r7, r1
		
		c=PIND;
		
		if(c==0b11111010)        // 0- light line, 1- no obstacle.
			PORTB=0b00001010;
  c4:	9a e0       	ldi	r25, 0x0A	; 10
  c6:	29 2e       	mov	r2, r25
			
		if(c==0b11111000)
			PORTB=0b00010000;
			
		if(c==0b11111001)
			PORTB=0b00010000;
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	38 2e       	mov	r3, r24
}

int readpot_adc()
{
	int p=0b00000000; // pot connected to ADC0
	ADMUX=ADMUX|p; // Input pin
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	87 b9       	out	0x07, r24	; 7
	ADCSRA=ADCSRA|(0b00000001<<ADSC); //Start of Conversion
  d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(0b00000001<<ADIF)==0); // Until conversion stops
  d2:	86 b1       	in	r24, 0x06	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADIF);// Clearing ADIF pin
  d4:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	95 b1       	in	r25, 0x05	; 5
	int c;
	
	while(1)
	{   
	    p=readpot_adc(); // reads pot;s analog value, converts it, and returns digital value to p
		a=p/40; // scaling factor 40
  da:	68 e2       	ldi	r22, 0x28	; 40
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__udivmodhi4>
  e2:	4b 01       	movw	r8, r22
		T=25.6; // scaled value of max time 1024 (# of quantisation levels)
		TOFF=a; 
		TON=T-TOFF;
  e4:	23 01       	movw	r4, r6
  e6:	46 1a       	sub	r4, r22
  e8:	57 0a       	sbc	r5, r23
		
		c=PIND;
  ea:	80 b3       	in	r24, 0x10	; 16
  ec:	c8 2f       	mov	r28, r24
  ee:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(c==0b11111010)        // 0- light line, 1- no obstacle.
  f0:	ca 3f       	cpi	r28, 0xFA	; 250
  f2:	d1 05       	cpc	r29, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x74>
			PORTB=0b00001010;
  f6:	28 ba       	out	0x18, r2	; 24
  f8:	10 c0       	rjmp	.+32     	; 0x11a <main+0x94>
			
		if(c==0b11111011)
  fa:	cb 3f       	cpi	r28, 0xFB	; 251
  fc:	d1 05       	cpc	r29, r1
  fe:	19 f4       	brne	.+6      	; 0x106 <main+0x80>
			PORTB=0b00001001;
 100:	89 e0       	ldi	r24, 0x09	; 9
 102:	88 bb       	out	0x18, r24	; 24
 104:	0f c0       	rjmp	.+30     	; 0x124 <main+0x9e>
			
		if(c==0b11111000)
 106:	c8 3f       	cpi	r28, 0xF8	; 248
 108:	d1 05       	cpc	r29, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <main+0x8a>
			PORTB=0b00010000;
 10c:	38 ba       	out	0x18, r3	; 24
 10e:	0f c0       	rjmp	.+30     	; 0x12e <main+0xa8>
			
		if(c==0b11111001)
 110:	c9 3f       	cpi	r28, 0xF9	; 249
 112:	d1 05       	cpc	r29, r1
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x94>
			PORTB=0b00010000;
 116:	38 ba       	out	0x18, r3	; 24
 118:	10 c0       	rjmp	.+32     	; 0x13a <main+0xb4>
			
		if(c==0b11111100)
 11a:	cc 3f       	cpi	r28, 0xFC	; 252
 11c:	d1 05       	cpc	r29, r1
 11e:	11 f4       	brne	.+4      	; 0x124 <main+0x9e>
			PORTB=0b00010000;
 120:	38 ba       	out	0x18, r3	; 24
 122:	11 c0       	rjmp	.+34     	; 0x146 <main+0xc0>
			
		if(c==0b11111101)
 124:	cd 3f       	cpi	r28, 0xFD	; 253
 126:	d1 05       	cpc	r29, r1
 128:	11 f4       	brne	.+4      	; 0x12e <main+0xa8>
			PORTB=0b00010000;
 12a:	38 ba       	out	0x18, r3	; 24
 12c:	88 c0       	rjmp	.+272    	; 0x23e <main+0x1b8>
			
		if(c==0b11111110)
 12e:	ce 3f       	cpi	r28, 0xFE	; 254
 130:	d1 05       	cpc	r29, r1
 132:	19 f4       	brne	.+6      	; 0x13a <main+0xb4>
			PORTB=0b00000110;
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	88 bb       	out	0x18, r24	; 24
 138:	08 c1       	rjmp	.+528    	; 0x34a <main+0x2c4>
			
		if(c==0b11111111)
 13a:	cf 3f       	cpi	r28, 0xFF	; 255
 13c:	d1 05       	cpc	r29, r1
 13e:	19 f4       	brne	.+6      	; 0x146 <main+0xc0>
			PORTB=0b00011010;
 140:	8a e1       	ldi	r24, 0x1A	; 26
 142:	88 bb       	out	0x18, r24	; 24
 144:	7e c1       	rjmp	.+764    	; 0x442 <main+0x3bc>
		
		// TILL THIS, NO CAVE
		// FROM NOW, WE HAVE CAVE
		
		if(c==0b11110010)        // 0- light line, 1- no obstacle, another 0 means presence of cave
 146:	c2 3f       	cpi	r28, 0xF2	; 242
 148:	d1 05       	cpc	r29, r1
 14a:	09 f0       	breq	.+2      	; 0x14e <main+0xc8>
 14c:	78 c0       	rjmp	.+240    	; 0x23e <main+0x1b8>
		{	
			PORTB=0b00001010;
 14e:	28 ba       	out	0x18, r2	; 24
			_delay_ms(TON);
 150:	b2 01       	movw	r22, r4
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 15a:	5b 01       	movw	r10, r22
 15c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	4a e7       	ldi	r20, 0x7A	; 122
 164:	53 e4       	ldi	r21, 0x43	; 67
 166:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 16a:	7b 01       	movw	r14, r22
 16c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e8       	ldi	r20, 0x80	; 128
 174:	5f e3       	ldi	r21, 0x3F	; 63
 176:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 17a:	88 23       	and	r24, r24
 17c:	1c f4       	brge	.+6      	; 0x184 <main+0xfe>
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	22 c0       	rjmp	.+68     	; 0x1c8 <main+0x142>
		__ticks = 1;
	else if (__tmp > 65535)
 184:	c8 01       	movw	r24, r16
 186:	b7 01       	movw	r22, r14
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	3f ef       	ldi	r19, 0xFF	; 255
 18c:	4f e7       	ldi	r20, 0x7F	; 127
 18e:	57 e4       	ldi	r21, 0x47	; 71
 190:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 194:	18 16       	cp	r1, r24
 196:	a4 f4       	brge	.+40     	; 0x1c0 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 198:	c6 01       	movw	r24, r12
 19a:	b5 01       	movw	r22, r10
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e2       	ldi	r20, 0x20	; 32
 1a2:	51 e4       	ldi	r21, 0x41	; 65
 1a4:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 1a8:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <main+0x132>
 1ae:	c3 01       	movw	r24, r6
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x12a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	61 50       	subi	r22, 0x01	; 1
 1b6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	61 15       	cp	r22, r1
 1ba:	71 05       	cpc	r23, r1
 1bc:	c1 f7       	brne	.-16     	; 0x1ae <main+0x128>
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 1c8:	cb 01       	movw	r24, r22
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x144>
			PORTB=0b00000000;
 1ce:	18 ba       	out	0x18, r1	; 24
			_delay_ms(TOFF);
 1d0:	b4 01       	movw	r22, r8
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 1da:	5b 01       	movw	r10, r22
 1dc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	4a e7       	ldi	r20, 0x7A	; 122
 1e4:	53 e4       	ldi	r21, 0x43	; 67
 1e6:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 1ea:	7b 01       	movw	r14, r22
 1ec:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e8       	ldi	r20, 0x80	; 128
 1f4:	5f e3       	ldi	r21, 0x3F	; 63
 1f6:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 1fa:	88 23       	and	r24, r24
 1fc:	0c f4       	brge	.+2      	; 0x200 <main+0x17a>
 1fe:	7c c0       	rjmp	.+248    	; 0x2f8 <main+0x272>
		__ticks = 1;
	else if (__tmp > 65535)
 200:	c8 01       	movw	r24, r16
 202:	b7 01       	movw	r22, r14
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	3f ef       	ldi	r19, 0xFF	; 255
 208:	4f e7       	ldi	r20, 0x7F	; 127
 20a:	57 e4       	ldi	r21, 0x47	; 71
 20c:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 210:	18 16       	cp	r1, r24
 212:	0c f0       	brlt	.+2      	; 0x216 <main+0x190>
 214:	92 c0       	rjmp	.+292    	; 0x33a <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 216:	c6 01       	movw	r24, r12
 218:	b5 01       	movw	r22, r10
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e2       	ldi	r20, 0x20	; 32
 220:	51 e4       	ldi	r21, 0x41	; 65
 222:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 226:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 22a:	05 c0       	rjmp	.+10     	; 0x236 <main+0x1b0>
 22c:	c3 01       	movw	r24, r6
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x1a8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	61 50       	subi	r22, 0x01	; 1
 234:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	c1 f7       	brne	.-16     	; 0x22c <main+0x1a6>
 23c:	02 c1       	rjmp	.+516    	; 0x442 <main+0x3bc>
		}
			
		if(c==0b11110011)
 23e:	c3 3f       	cpi	r28, 0xF3	; 243
 240:	d1 05       	cpc	r29, r1
 242:	09 f0       	breq	.+2      	; 0x246 <main+0x1c0>
 244:	82 c0       	rjmp	.+260    	; 0x34a <main+0x2c4>
		{	
			PORTB=0b00001001;
 246:	89 e0       	ldi	r24, 0x09	; 9
 248:	88 bb       	out	0x18, r24	; 24
			_delay_ms(TON);
 24a:	b2 01       	movw	r22, r4
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 254:	5b 01       	movw	r10, r22
 256:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	4a e7       	ldi	r20, 0x7A	; 122
 25e:	53 e4       	ldi	r21, 0x43	; 67
 260:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 264:	7b 01       	movw	r14, r22
 266:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	40 e8       	ldi	r20, 0x80	; 128
 26e:	5f e3       	ldi	r21, 0x3F	; 63
 270:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 274:	88 23       	and	r24, r24
 276:	1c f4       	brge	.+6      	; 0x27e <main+0x1f8>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	22 c0       	rjmp	.+68     	; 0x2c2 <main+0x23c>
		__ticks = 1;
	else if (__tmp > 65535)
 27e:	c8 01       	movw	r24, r16
 280:	b7 01       	movw	r22, r14
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	4f e7       	ldi	r20, 0x7F	; 127
 288:	57 e4       	ldi	r21, 0x47	; 71
 28a:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 28e:	18 16       	cp	r1, r24
 290:	a4 f4       	brge	.+40     	; 0x2ba <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 292:	c6 01       	movw	r24, r12
 294:	b5 01       	movw	r22, r10
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	40 e2       	ldi	r20, 0x20	; 32
 29c:	51 e4       	ldi	r21, 0x41	; 65
 29e:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 2a2:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <main+0x22c>
 2a8:	c3 01       	movw	r24, r6
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x224>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ae:	61 50       	subi	r22, 0x01	; 1
 2b0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b2:	61 15       	cp	r22, r1
 2b4:	71 05       	cpc	r23, r1
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <main+0x222>
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ba:	c8 01       	movw	r24, r16
 2bc:	b7 01       	movw	r22, r14
 2be:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 2c2:	cb 01       	movw	r24, r22
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x23e>
			PORTB=0b00000000;
 2c8:	18 ba       	out	0x18, r1	; 24
			_delay_ms(TOFF);
 2ca:	b4 01       	movw	r22, r8
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 2d4:	5b 01       	movw	r10, r22
 2d6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	4a e7       	ldi	r20, 0x7A	; 122
 2de:	53 e4       	ldi	r21, 0x43	; 67
 2e0:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 2e4:	7b 01       	movw	r14, r22
 2e6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e8       	ldi	r20, 0x80	; 128
 2ee:	5f e3       	ldi	r21, 0x3F	; 63
 2f0:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	1c f4       	brge	.+6      	; 0x2fe <main+0x278>
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	22 c0       	rjmp	.+68     	; 0x342 <main+0x2bc>
		__ticks = 1;
	else if (__tmp > 65535)
 2fe:	c8 01       	movw	r24, r16
 300:	b7 01       	movw	r22, r14
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	3f ef       	ldi	r19, 0xFF	; 255
 306:	4f e7       	ldi	r20, 0x7F	; 127
 308:	57 e4       	ldi	r21, 0x47	; 71
 30a:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 30e:	18 16       	cp	r1, r24
 310:	a4 f4       	brge	.+40     	; 0x33a <main+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 312:	c6 01       	movw	r24, r12
 314:	b5 01       	movw	r22, r10
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e2       	ldi	r20, 0x20	; 32
 31c:	51 e4       	ldi	r21, 0x41	; 65
 31e:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 322:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 326:	05 c0       	rjmp	.+10     	; 0x332 <main+0x2ac>
 328:	c3 01       	movw	r24, r6
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <main+0x2a4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32e:	61 50       	subi	r22, 0x01	; 1
 330:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 332:	61 15       	cp	r22, r1
 334:	71 05       	cpc	r23, r1
 336:	c1 f7       	brne	.-16     	; 0x328 <main+0x2a2>
 338:	84 c0       	rjmp	.+264    	; 0x442 <main+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 33a:	c8 01       	movw	r24, r16
 33c:	b7 01       	movw	r22, r14
 33e:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 342:	cb 01       	movw	r24, r22
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0x2be>
 348:	7c c0       	rjmp	.+248    	; 0x442 <main+0x3bc>
		}
		
			
		if(c==0b11110000)
 34a:	c0 3f       	cpi	r28, 0xF0	; 240
 34c:	d1 05       	cpc	r29, r1
 34e:	09 f0       	breq	.+2      	; 0x352 <main+0x2cc>
 350:	78 c0       	rjmp	.+240    	; 0x442 <main+0x3bc>
		{
			PORTB=0b00010000;
 352:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TON);
 354:	b2 01       	movw	r22, r4
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 35e:	5b 01       	movw	r10, r22
 360:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	4a e7       	ldi	r20, 0x7A	; 122
 368:	53 e4       	ldi	r21, 0x43	; 67
 36a:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 36e:	7b 01       	movw	r14, r22
 370:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	40 e8       	ldi	r20, 0x80	; 128
 378:	5f e3       	ldi	r21, 0x3F	; 63
 37a:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 37e:	88 23       	and	r24, r24
 380:	1c f4       	brge	.+6      	; 0x388 <main+0x302>
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	22 c0       	rjmp	.+68     	; 0x3cc <main+0x346>
		__ticks = 1;
	else if (__tmp > 65535)
 388:	c8 01       	movw	r24, r16
 38a:	b7 01       	movw	r22, r14
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	3f ef       	ldi	r19, 0xFF	; 255
 390:	4f e7       	ldi	r20, 0x7F	; 127
 392:	57 e4       	ldi	r21, 0x47	; 71
 394:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 398:	18 16       	cp	r1, r24
 39a:	a4 f4       	brge	.+40     	; 0x3c4 <main+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 39c:	c6 01       	movw	r24, r12
 39e:	b5 01       	movw	r22, r10
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e2       	ldi	r20, 0x20	; 32
 3a6:	51 e4       	ldi	r21, 0x41	; 65
 3a8:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 3ac:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 3b0:	05 c0       	rjmp	.+10     	; 0x3bc <main+0x336>
 3b2:	c3 01       	movw	r24, r6
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x32e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b8:	61 50       	subi	r22, 0x01	; 1
 3ba:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3bc:	61 15       	cp	r22, r1
 3be:	71 05       	cpc	r23, r1
 3c0:	c1 f7       	brne	.-16     	; 0x3b2 <main+0x32c>
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <main+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3c4:	c8 01       	movw	r24, r16
 3c6:	b7 01       	movw	r22, r14
 3c8:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 3cc:	cb 01       	movw	r24, r22
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x348>
			PORTB=0b00010000;
 3d2:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TOFF);
 3d4:	b4 01       	movw	r22, r8
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 3de:	5b 01       	movw	r10, r22
 3e0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	4a e7       	ldi	r20, 0x7A	; 122
 3e8:	53 e4       	ldi	r21, 0x43	; 67
 3ea:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 3ee:	7b 01       	movw	r14, r22
 3f0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e8       	ldi	r20, 0x80	; 128
 3f8:	5f e3       	ldi	r21, 0x3F	; 63
 3fa:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 3fe:	88 23       	and	r24, r24
 400:	0c f4       	brge	.+2      	; 0x404 <main+0x37e>
 402:	7b c0       	rjmp	.+246    	; 0x4fa <__stack+0x9b>
		__ticks = 1;
	else if (__tmp > 65535)
 404:	c8 01       	movw	r24, r16
 406:	b7 01       	movw	r22, r14
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	3f ef       	ldi	r19, 0xFF	; 255
 40c:	4f e7       	ldi	r20, 0x7F	; 127
 40e:	57 e4       	ldi	r21, 0x47	; 71
 410:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 414:	18 16       	cp	r1, r24
 416:	0c f0       	brlt	.+2      	; 0x41a <main+0x394>
 418:	91 c0       	rjmp	.+290    	; 0x53c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 41a:	c6 01       	movw	r24, r12
 41c:	b5 01       	movw	r22, r10
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	40 e2       	ldi	r20, 0x20	; 32
 424:	51 e4       	ldi	r21, 0x41	; 65
 426:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 42a:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 42e:	05 c0       	rjmp	.+10     	; 0x43a <main+0x3b4>
 430:	c3 01       	movw	r24, r6
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <main+0x3ac>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 436:	61 50       	subi	r22, 0x01	; 1
 438:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	c1 f7       	brne	.-16     	; 0x430 <main+0x3aa>
 440:	01 c1       	rjmp	.+514    	; 0x644 <__stack+0x1e5>
		}
		
		if(c==0b11110001)
 442:	c1 3f       	cpi	r28, 0xF1	; 241
 444:	d1 05       	cpc	r29, r1
 446:	09 f0       	breq	.+2      	; 0x44a <main+0x3c4>
 448:	81 c0       	rjmp	.+258    	; 0x54c <__stack+0xed>
		{
			PORTB=0b00010000;
 44a:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TON);
 44c:	b2 01       	movw	r22, r4
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 456:	5b 01       	movw	r10, r22
 458:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	4a e7       	ldi	r20, 0x7A	; 122
 460:	53 e4       	ldi	r21, 0x43	; 67
 462:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 466:	7b 01       	movw	r14, r22
 468:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e8       	ldi	r20, 0x80	; 128
 470:	5f e3       	ldi	r21, 0x3F	; 63
 472:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 476:	88 23       	and	r24, r24
 478:	1c f4       	brge	.+6      	; 0x480 <__stack+0x21>
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	22 c0       	rjmp	.+68     	; 0x4c4 <__stack+0x65>
		__ticks = 1;
	else if (__tmp > 65535)
 480:	c8 01       	movw	r24, r16
 482:	b7 01       	movw	r22, r14
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	3f ef       	ldi	r19, 0xFF	; 255
 488:	4f e7       	ldi	r20, 0x7F	; 127
 48a:	57 e4       	ldi	r21, 0x47	; 71
 48c:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 490:	18 16       	cp	r1, r24
 492:	a4 f4       	brge	.+40     	; 0x4bc <__stack+0x5d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 494:	c6 01       	movw	r24, r12
 496:	b5 01       	movw	r22, r10
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e2       	ldi	r20, 0x20	; 32
 49e:	51 e4       	ldi	r21, 0x41	; 65
 4a0:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 4a4:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__stack+0x55>
 4aa:	c3 01       	movw	r24, r6
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__stack+0x4d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b0:	61 50       	subi	r22, 0x01	; 1
 4b2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4b4:	61 15       	cp	r22, r1
 4b6:	71 05       	cpc	r23, r1
 4b8:	c1 f7       	brne	.-16     	; 0x4aa <__stack+0x4b>
 4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__stack+0x6b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4bc:	c8 01       	movw	r24, r16
 4be:	b7 01       	movw	r22, r14
 4c0:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 4c4:	cb 01       	movw	r24, r22
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__stack+0x67>
			PORTB=0b00010000;
 4ca:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TOFF);
 4cc:	b4 01       	movw	r22, r8
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 4d6:	5b 01       	movw	r10, r22
 4d8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	4a e7       	ldi	r20, 0x7A	; 122
 4e0:	53 e4       	ldi	r21, 0x43	; 67
 4e2:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 4e6:	7b 01       	movw	r14, r22
 4e8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	40 e8       	ldi	r20, 0x80	; 128
 4f0:	5f e3       	ldi	r21, 0x3F	; 63
 4f2:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 4f6:	88 23       	and	r24, r24
 4f8:	1c f4       	brge	.+6      	; 0x500 <__stack+0xa1>
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	22 c0       	rjmp	.+68     	; 0x544 <__stack+0xe5>
		__ticks = 1;
	else if (__tmp > 65535)
 500:	c8 01       	movw	r24, r16
 502:	b7 01       	movw	r22, r14
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	3f ef       	ldi	r19, 0xFF	; 255
 508:	4f e7       	ldi	r20, 0x7F	; 127
 50a:	57 e4       	ldi	r21, 0x47	; 71
 50c:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 510:	18 16       	cp	r1, r24
 512:	a4 f4       	brge	.+40     	; 0x53c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 514:	c6 01       	movw	r24, r12
 516:	b5 01       	movw	r22, r10
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	40 e2       	ldi	r20, 0x20	; 32
 51e:	51 e4       	ldi	r21, 0x41	; 65
 520:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 524:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 528:	05 c0       	rjmp	.+10     	; 0x534 <__stack+0xd5>
 52a:	c3 01       	movw	r24, r6
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <__stack+0xcd>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 530:	61 50       	subi	r22, 0x01	; 1
 532:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 534:	61 15       	cp	r22, r1
 536:	71 05       	cpc	r23, r1
 538:	c1 f7       	brne	.-16     	; 0x52a <__stack+0xcb>
 53a:	84 c0       	rjmp	.+264    	; 0x644 <__stack+0x1e5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 53c:	c8 01       	movw	r24, r16
 53e:	b7 01       	movw	r22, r14
 540:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 544:	cb 01       	movw	r24, r22
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__stack+0xe7>
 54a:	7c c0       	rjmp	.+248    	; 0x644 <__stack+0x1e5>
		}
			
			
		if(c==0b11110100)
 54c:	c4 3f       	cpi	r28, 0xF4	; 244
 54e:	d1 05       	cpc	r29, r1
 550:	09 f0       	breq	.+2      	; 0x554 <__stack+0xf5>
 552:	78 c0       	rjmp	.+240    	; 0x644 <__stack+0x1e5>
		{
			PORTB=0b00010000;
 554:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TON);
 556:	b2 01       	movw	r22, r4
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 560:	5b 01       	movw	r10, r22
 562:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	4a e7       	ldi	r20, 0x7A	; 122
 56a:	53 e4       	ldi	r21, 0x43	; 67
 56c:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 570:	7b 01       	movw	r14, r22
 572:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e8       	ldi	r20, 0x80	; 128
 57a:	5f e3       	ldi	r21, 0x3F	; 63
 57c:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 580:	88 23       	and	r24, r24
 582:	1c f4       	brge	.+6      	; 0x58a <__stack+0x12b>
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	22 c0       	rjmp	.+68     	; 0x5ce <__stack+0x16f>
		__ticks = 1;
	else if (__tmp > 65535)
 58a:	c8 01       	movw	r24, r16
 58c:	b7 01       	movw	r22, r14
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	3f ef       	ldi	r19, 0xFF	; 255
 592:	4f e7       	ldi	r20, 0x7F	; 127
 594:	57 e4       	ldi	r21, 0x47	; 71
 596:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 59a:	18 16       	cp	r1, r24
 59c:	a4 f4       	brge	.+40     	; 0x5c6 <__stack+0x167>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 59e:	c6 01       	movw	r24, r12
 5a0:	b5 01       	movw	r22, r10
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 e2       	ldi	r20, 0x20	; 32
 5a8:	51 e4       	ldi	r21, 0x41	; 65
 5aa:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 5ae:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__stack+0x15f>
 5b4:	c3 01       	movw	r24, r6
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <__stack+0x157>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ba:	61 50       	subi	r22, 0x01	; 1
 5bc:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5be:	61 15       	cp	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	c1 f7       	brne	.-16     	; 0x5b4 <__stack+0x155>
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <__stack+0x175>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5c6:	c8 01       	movw	r24, r16
 5c8:	b7 01       	movw	r22, r14
 5ca:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 5ce:	cb 01       	movw	r24, r22
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <__stack+0x171>
			PORTB=0b00010000;
 5d4:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TOFF);
 5d6:	b4 01       	movw	r22, r8
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 5e0:	5b 01       	movw	r10, r22
 5e2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	4a e7       	ldi	r20, 0x7A	; 122
 5ea:	53 e4       	ldi	r21, 0x43	; 67
 5ec:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 5f0:	7b 01       	movw	r14, r22
 5f2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	40 e8       	ldi	r20, 0x80	; 128
 5fa:	5f e3       	ldi	r21, 0x3F	; 63
 5fc:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 600:	88 23       	and	r24, r24
 602:	0c f4       	brge	.+2      	; 0x606 <__stack+0x1a7>
 604:	7b c0       	rjmp	.+246    	; 0x6fc <__stack+0x29d>
		__ticks = 1;
	else if (__tmp > 65535)
 606:	c8 01       	movw	r24, r16
 608:	b7 01       	movw	r22, r14
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	3f ef       	ldi	r19, 0xFF	; 255
 60e:	4f e7       	ldi	r20, 0x7F	; 127
 610:	57 e4       	ldi	r21, 0x47	; 71
 612:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 616:	18 16       	cp	r1, r24
 618:	0c f0       	brlt	.+2      	; 0x61c <__stack+0x1bd>
 61a:	91 c0       	rjmp	.+290    	; 0x73e <__stack+0x2df>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 61c:	c6 01       	movw	r24, r12
 61e:	b5 01       	movw	r22, r10
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	40 e2       	ldi	r20, 0x20	; 32
 626:	51 e4       	ldi	r21, 0x41	; 65
 628:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 62c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 630:	05 c0       	rjmp	.+10     	; 0x63c <__stack+0x1dd>
 632:	c3 01       	movw	r24, r6
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <__stack+0x1d5>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 638:	61 50       	subi	r22, 0x01	; 1
 63a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	c1 f7       	brne	.-16     	; 0x632 <__stack+0x1d3>
 642:	02 c1       	rjmp	.+516    	; 0x848 <__stack+0x3e9>
		}
			
		if(c==0b11110101)
 644:	c5 3f       	cpi	r28, 0xF5	; 245
 646:	d1 05       	cpc	r29, r1
 648:	09 f0       	breq	.+2      	; 0x64c <__stack+0x1ed>
 64a:	81 c0       	rjmp	.+258    	; 0x74e <__stack+0x2ef>
		{
			PORTB=0b00010000;
 64c:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TON);
 64e:	b2 01       	movw	r22, r4
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 658:	5b 01       	movw	r10, r22
 65a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	4a e7       	ldi	r20, 0x7A	; 122
 662:	53 e4       	ldi	r21, 0x43	; 67
 664:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 668:	7b 01       	movw	r14, r22
 66a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	40 e8       	ldi	r20, 0x80	; 128
 672:	5f e3       	ldi	r21, 0x3F	; 63
 674:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 678:	88 23       	and	r24, r24
 67a:	1c f4       	brge	.+6      	; 0x682 <__stack+0x223>
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	22 c0       	rjmp	.+68     	; 0x6c6 <__stack+0x267>
		__ticks = 1;
	else if (__tmp > 65535)
 682:	c8 01       	movw	r24, r16
 684:	b7 01       	movw	r22, r14
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	3f ef       	ldi	r19, 0xFF	; 255
 68a:	4f e7       	ldi	r20, 0x7F	; 127
 68c:	57 e4       	ldi	r21, 0x47	; 71
 68e:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 692:	18 16       	cp	r1, r24
 694:	a4 f4       	brge	.+40     	; 0x6be <__stack+0x25f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 696:	c6 01       	movw	r24, r12
 698:	b5 01       	movw	r22, r10
 69a:	20 e0       	ldi	r18, 0x00	; 0
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	40 e2       	ldi	r20, 0x20	; 32
 6a0:	51 e4       	ldi	r21, 0x41	; 65
 6a2:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 6a6:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 6aa:	05 c0       	rjmp	.+10     	; 0x6b6 <__stack+0x257>
 6ac:	c3 01       	movw	r24, r6
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <__stack+0x24f>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6b2:	61 50       	subi	r22, 0x01	; 1
 6b4:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b6:	61 15       	cp	r22, r1
 6b8:	71 05       	cpc	r23, r1
 6ba:	c1 f7       	brne	.-16     	; 0x6ac <__stack+0x24d>
 6bc:	07 c0       	rjmp	.+14     	; 0x6cc <__stack+0x26d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6be:	c8 01       	movw	r24, r16
 6c0:	b7 01       	movw	r22, r14
 6c2:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 6c6:	cb 01       	movw	r24, r22
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <__stack+0x269>
			PORTB=0b00010000;
 6cc:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TOFF);
 6ce:	b4 01       	movw	r22, r8
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 6d8:	5b 01       	movw	r10, r22
 6da:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 6dc:	20 e0       	ldi	r18, 0x00	; 0
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	4a e7       	ldi	r20, 0x7A	; 122
 6e2:	53 e4       	ldi	r21, 0x43	; 67
 6e4:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 6e8:	7b 01       	movw	r14, r22
 6ea:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	40 e8       	ldi	r20, 0x80	; 128
 6f2:	5f e3       	ldi	r21, 0x3F	; 63
 6f4:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 6f8:	88 23       	and	r24, r24
 6fa:	1c f4       	brge	.+6      	; 0x702 <__stack+0x2a3>
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	22 c0       	rjmp	.+68     	; 0x746 <__stack+0x2e7>
		__ticks = 1;
	else if (__tmp > 65535)
 702:	c8 01       	movw	r24, r16
 704:	b7 01       	movw	r22, r14
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	3f ef       	ldi	r19, 0xFF	; 255
 70a:	4f e7       	ldi	r20, 0x7F	; 127
 70c:	57 e4       	ldi	r21, 0x47	; 71
 70e:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 712:	18 16       	cp	r1, r24
 714:	a4 f4       	brge	.+40     	; 0x73e <__stack+0x2df>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 716:	c6 01       	movw	r24, r12
 718:	b5 01       	movw	r22, r10
 71a:	20 e0       	ldi	r18, 0x00	; 0
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	40 e2       	ldi	r20, 0x20	; 32
 720:	51 e4       	ldi	r21, 0x41	; 65
 722:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 726:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 72a:	05 c0       	rjmp	.+10     	; 0x736 <__stack+0x2d7>
 72c:	c3 01       	movw	r24, r6
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <__stack+0x2cf>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 732:	61 50       	subi	r22, 0x01	; 1
 734:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 736:	61 15       	cp	r22, r1
 738:	71 05       	cpc	r23, r1
 73a:	c1 f7       	brne	.-16     	; 0x72c <__stack+0x2cd>
 73c:	85 c0       	rjmp	.+266    	; 0x848 <__stack+0x3e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 73e:	c8 01       	movw	r24, r16
 740:	b7 01       	movw	r22, r14
 742:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 746:	cb 01       	movw	r24, r22
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <__stack+0x2e9>
 74c:	7d c0       	rjmp	.+250    	; 0x848 <__stack+0x3e9>
		}
			
		if(c==0b11110110)
 74e:	c6 3f       	cpi	r28, 0xF6	; 246
 750:	d1 05       	cpc	r29, r1
 752:	09 f0       	breq	.+2      	; 0x756 <__stack+0x2f7>
 754:	79 c0       	rjmp	.+242    	; 0x848 <__stack+0x3e9>
		{	
			PORTB=0b00000110;
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	88 bb       	out	0x18, r24	; 24
			_delay_ms(TON);
 75a:	b2 01       	movw	r22, r4
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 764:	5b 01       	movw	r10, r22
 766:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	4a e7       	ldi	r20, 0x7A	; 122
 76e:	53 e4       	ldi	r21, 0x43	; 67
 770:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 774:	7b 01       	movw	r14, r22
 776:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 778:	20 e0       	ldi	r18, 0x00	; 0
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	40 e8       	ldi	r20, 0x80	; 128
 77e:	5f e3       	ldi	r21, 0x3F	; 63
 780:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 784:	88 23       	and	r24, r24
 786:	1c f4       	brge	.+6      	; 0x78e <__stack+0x32f>
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	22 c0       	rjmp	.+68     	; 0x7d2 <__stack+0x373>
		__ticks = 1;
	else if (__tmp > 65535)
 78e:	c8 01       	movw	r24, r16
 790:	b7 01       	movw	r22, r14
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	3f ef       	ldi	r19, 0xFF	; 255
 796:	4f e7       	ldi	r20, 0x7F	; 127
 798:	57 e4       	ldi	r21, 0x47	; 71
 79a:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 79e:	18 16       	cp	r1, r24
 7a0:	a4 f4       	brge	.+40     	; 0x7ca <__stack+0x36b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7a2:	c6 01       	movw	r24, r12
 7a4:	b5 01       	movw	r22, r10
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	40 e2       	ldi	r20, 0x20	; 32
 7ac:	51 e4       	ldi	r21, 0x41	; 65
 7ae:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 7b2:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <__stack+0x363>
 7b8:	c3 01       	movw	r24, r6
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <__stack+0x35b>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7be:	61 50       	subi	r22, 0x01	; 1
 7c0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7c2:	61 15       	cp	r22, r1
 7c4:	71 05       	cpc	r23, r1
 7c6:	c1 f7       	brne	.-16     	; 0x7b8 <__stack+0x359>
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <__stack+0x379>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7ca:	c8 01       	movw	r24, r16
 7cc:	b7 01       	movw	r22, r14
 7ce:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 7d2:	cb 01       	movw	r24, r22
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <__stack+0x375>
			PORTB=0b00000000;
 7d8:	18 ba       	out	0x18, r1	; 24
			_delay_ms(TOFF);
 7da:	b4 01       	movw	r22, r8
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 7e4:	5b 01       	movw	r10, r22
 7e6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	4a e7       	ldi	r20, 0x7A	; 122
 7ee:	53 e4       	ldi	r21, 0x43	; 67
 7f0:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 7f4:	7b 01       	movw	r14, r22
 7f6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	40 e8       	ldi	r20, 0x80	; 128
 7fe:	5f e3       	ldi	r21, 0x3F	; 63
 800:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 804:	88 23       	and	r24, r24
 806:	0c f4       	brge	.+2      	; 0x80a <__stack+0x3ab>
 808:	7c c0       	rjmp	.+248    	; 0x902 <__stack+0x4a3>
		__ticks = 1;
	else if (__tmp > 65535)
 80a:	c8 01       	movw	r24, r16
 80c:	b7 01       	movw	r22, r14
 80e:	20 e0       	ldi	r18, 0x00	; 0
 810:	3f ef       	ldi	r19, 0xFF	; 255
 812:	4f e7       	ldi	r20, 0x7F	; 127
 814:	57 e4       	ldi	r21, 0x47	; 71
 816:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 81a:	18 16       	cp	r1, r24
 81c:	0c f0       	brlt	.+2      	; 0x820 <__stack+0x3c1>
 81e:	92 c0       	rjmp	.+292    	; 0x944 <__stack+0x4e5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 820:	c6 01       	movw	r24, r12
 822:	b5 01       	movw	r22, r10
 824:	20 e0       	ldi	r18, 0x00	; 0
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	40 e2       	ldi	r20, 0x20	; 32
 82a:	51 e4       	ldi	r21, 0x41	; 65
 82c:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 830:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 834:	05 c0       	rjmp	.+10     	; 0x840 <__stack+0x3e1>
 836:	c3 01       	movw	r24, r6
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <__stack+0x3d9>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 83c:	61 50       	subi	r22, 0x01	; 1
 83e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 840:	61 15       	cp	r22, r1
 842:	71 05       	cpc	r23, r1
 844:	c1 f7       	brne	.-16     	; 0x836 <__stack+0x3d7>
 846:	42 cc       	rjmp	.-1916   	; 0xcc <main+0x46>
		}
			
		if(c==0b11110111)
 848:	c7 3f       	cpi	r28, 0xF7	; 247
 84a:	d1 05       	cpc	r29, r1
 84c:	09 f0       	breq	.+2      	; 0x850 <__stack+0x3f1>
 84e:	3e cc       	rjmp	.-1924   	; 0xcc <main+0x46>
		{
			PORTB=0b00011010;
 850:	8a e1       	ldi	r24, 0x1A	; 26
 852:	88 bb       	out	0x18, r24	; 24
			_delay_ms(TON);
 854:	b2 01       	movw	r22, r4
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 85e:	5b 01       	movw	r10, r22
 860:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 862:	20 e0       	ldi	r18, 0x00	; 0
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	4a e7       	ldi	r20, 0x7A	; 122
 868:	53 e4       	ldi	r21, 0x43	; 67
 86a:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 86e:	7b 01       	movw	r14, r22
 870:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 872:	20 e0       	ldi	r18, 0x00	; 0
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	40 e8       	ldi	r20, 0x80	; 128
 878:	5f e3       	ldi	r21, 0x3F	; 63
 87a:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 87e:	88 23       	and	r24, r24
 880:	1c f4       	brge	.+6      	; 0x888 <__stack+0x429>
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	22 c0       	rjmp	.+68     	; 0x8cc <__stack+0x46d>
		__ticks = 1;
	else if (__tmp > 65535)
 888:	c8 01       	movw	r24, r16
 88a:	b7 01       	movw	r22, r14
 88c:	20 e0       	ldi	r18, 0x00	; 0
 88e:	3f ef       	ldi	r19, 0xFF	; 255
 890:	4f e7       	ldi	r20, 0x7F	; 127
 892:	57 e4       	ldi	r21, 0x47	; 71
 894:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 898:	18 16       	cp	r1, r24
 89a:	a4 f4       	brge	.+40     	; 0x8c4 <__stack+0x465>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 89c:	c6 01       	movw	r24, r12
 89e:	b5 01       	movw	r22, r10
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	40 e2       	ldi	r20, 0x20	; 32
 8a6:	51 e4       	ldi	r21, 0x41	; 65
 8a8:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 8ac:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 8b0:	05 c0       	rjmp	.+10     	; 0x8bc <__stack+0x45d>
 8b2:	c3 01       	movw	r24, r6
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__stack+0x455>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8bc:	61 15       	cp	r22, r1
 8be:	71 05       	cpc	r23, r1
 8c0:	c1 f7       	brne	.-16     	; 0x8b2 <__stack+0x453>
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <__stack+0x473>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8c4:	c8 01       	movw	r24, r16
 8c6:	b7 01       	movw	r22, r14
 8c8:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 8cc:	cb 01       	movw	r24, r22
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	f1 f7       	brne	.-4      	; 0x8ce <__stack+0x46f>
			PORTB=0b00010000;
 8d2:	38 ba       	out	0x18, r3	; 24
			_delay_ms(TOFF);
 8d4:	b4 01       	movw	r22, r8
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 8de:	5b 01       	movw	r10, r22
 8e0:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	4a e7       	ldi	r20, 0x7A	; 122
 8e8:	53 e4       	ldi	r21, 0x43	; 67
 8ea:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 8ee:	7b 01       	movw	r14, r22
 8f0:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	40 e8       	ldi	r20, 0x80	; 128
 8f8:	5f e3       	ldi	r21, 0x3F	; 63
 8fa:	0e 94 aa 04 	call	0x954	; 0x954 <__cmpsf2>
 8fe:	88 23       	and	r24, r24
 900:	1c f4       	brge	.+6      	; 0x908 <__stack+0x4a9>
 902:	61 e0       	ldi	r22, 0x01	; 1
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	22 c0       	rjmp	.+68     	; 0x94c <__stack+0x4ed>
		__ticks = 1;
	else if (__tmp > 65535)
 908:	c8 01       	movw	r24, r16
 90a:	b7 01       	movw	r22, r14
 90c:	20 e0       	ldi	r18, 0x00	; 0
 90e:	3f ef       	ldi	r19, 0xFF	; 255
 910:	4f e7       	ldi	r20, 0x7F	; 127
 912:	57 e4       	ldi	r21, 0x47	; 71
 914:	0e 94 64 05 	call	0xac8	; 0xac8 <__gesf2>
 918:	18 16       	cp	r1, r24
 91a:	a4 f4       	brge	.+40     	; 0x944 <__stack+0x4e5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 91c:	c6 01       	movw	r24, r12
 91e:	b5 01       	movw	r22, r10
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	40 e2       	ldi	r20, 0x20	; 32
 926:	51 e4       	ldi	r21, 0x41	; 65
 928:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3>
 92c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 930:	05 c0       	rjmp	.+10     	; 0x93c <__stack+0x4dd>
 932:	c3 01       	movw	r24, r6
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	f1 f7       	brne	.-4      	; 0x934 <__stack+0x4d5>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 938:	61 50       	subi	r22, 0x01	; 1
 93a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 93c:	61 15       	cp	r22, r1
 93e:	71 05       	cpc	r23, r1
 940:	c1 f7       	brne	.-16     	; 0x932 <__stack+0x4d3>
 942:	c4 cb       	rjmp	.-2168   	; 0xcc <main+0x46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 944:	c8 01       	movw	r24, r16
 946:	b7 01       	movw	r22, r14
 948:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
 94c:	cb 01       	movw	r24, r22
 94e:	01 97       	sbiw	r24, 0x01	; 1
 950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0x4ef>
 952:	bc cb       	rjmp	.-2184   	; 0xcc <main+0x46>

00000954 <__cmpsf2>:
 954:	6c d0       	rcall	.+216    	; 0xa2e <__fp_cmp>
 956:	08 f4       	brcc	.+2      	; 0x95a <__cmpsf2+0x6>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	08 95       	ret

0000095c <__fixunssfsi>:
 95c:	94 d0       	rcall	.+296    	; 0xa86 <__fp_splitA>
 95e:	88 f0       	brcs	.+34     	; 0x982 <__fixunssfsi+0x26>
 960:	9f 57       	subi	r25, 0x7F	; 127
 962:	90 f0       	brcs	.+36     	; 0x988 <__fixunssfsi+0x2c>
 964:	b9 2f       	mov	r27, r25
 966:	99 27       	eor	r25, r25
 968:	b7 51       	subi	r27, 0x17	; 23
 96a:	a0 f0       	brcs	.+40     	; 0x994 <__fixunssfsi+0x38>
 96c:	d1 f0       	breq	.+52     	; 0x9a2 <__fixunssfsi+0x46>
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	1a f0       	brmi	.+6      	; 0x97e <__fixunssfsi+0x22>
 978:	ba 95       	dec	r27
 97a:	c9 f7       	brne	.-14     	; 0x96e <__fixunssfsi+0x12>
 97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__fixunssfsi+0x46>
 97e:	b1 30       	cpi	r27, 0x01	; 1
 980:	81 f0       	breq	.+32     	; 0x9a2 <__fixunssfsi+0x46>
 982:	9b d0       	rcall	.+310    	; 0xaba <__fp_zero>
 984:	b1 e0       	ldi	r27, 0x01	; 1
 986:	08 95       	ret
 988:	98 c0       	rjmp	.+304    	; 0xaba <__fp_zero>
 98a:	67 2f       	mov	r22, r23
 98c:	78 2f       	mov	r23, r24
 98e:	88 27       	eor	r24, r24
 990:	b8 5f       	subi	r27, 0xF8	; 248
 992:	39 f0       	breq	.+14     	; 0x9a2 <__fixunssfsi+0x46>
 994:	b9 3f       	cpi	r27, 0xF9	; 249
 996:	cc f3       	brlt	.-14     	; 0x98a <__fixunssfsi+0x2e>
 998:	86 95       	lsr	r24
 99a:	77 95       	ror	r23
 99c:	67 95       	ror	r22
 99e:	b3 95       	inc	r27
 9a0:	d9 f7       	brne	.-10     	; 0x998 <__fixunssfsi+0x3c>
 9a2:	3e f4       	brtc	.+14     	; 0x9b2 <__fixunssfsi+0x56>
 9a4:	90 95       	com	r25
 9a6:	80 95       	com	r24
 9a8:	70 95       	com	r23
 9aa:	61 95       	neg	r22
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__floatunsisf>:
 9b4:	e8 94       	clt
 9b6:	09 c0       	rjmp	.+18     	; 0x9ca <__floatsisf+0x12>

000009b8 <__floatsisf>:
 9b8:	97 fb       	bst	r25, 7
 9ba:	3e f4       	brtc	.+14     	; 0x9ca <__floatsisf+0x12>
 9bc:	90 95       	com	r25
 9be:	80 95       	com	r24
 9c0:	70 95       	com	r23
 9c2:	61 95       	neg	r22
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	99 23       	and	r25, r25
 9cc:	a9 f0       	breq	.+42     	; 0x9f8 <__floatsisf+0x40>
 9ce:	f9 2f       	mov	r31, r25
 9d0:	96 e9       	ldi	r25, 0x96	; 150
 9d2:	bb 27       	eor	r27, r27
 9d4:	93 95       	inc	r25
 9d6:	f6 95       	lsr	r31
 9d8:	87 95       	ror	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f1 11       	cpse	r31, r1
 9e2:	f8 cf       	rjmp	.-16     	; 0x9d4 <__floatsisf+0x1c>
 9e4:	fa f4       	brpl	.+62     	; 0xa24 <__floatsisf+0x6c>
 9e6:	bb 0f       	add	r27, r27
 9e8:	11 f4       	brne	.+4      	; 0x9ee <__floatsisf+0x36>
 9ea:	60 ff       	sbrs	r22, 0
 9ec:	1b c0       	rjmp	.+54     	; 0xa24 <__floatsisf+0x6c>
 9ee:	6f 5f       	subi	r22, 0xFF	; 255
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	16 c0       	rjmp	.+44     	; 0xa24 <__floatsisf+0x6c>
 9f8:	88 23       	and	r24, r24
 9fa:	11 f0       	breq	.+4      	; 0xa00 <__floatsisf+0x48>
 9fc:	96 e9       	ldi	r25, 0x96	; 150
 9fe:	11 c0       	rjmp	.+34     	; 0xa22 <__floatsisf+0x6a>
 a00:	77 23       	and	r23, r23
 a02:	21 f0       	breq	.+8      	; 0xa0c <__floatsisf+0x54>
 a04:	9e e8       	ldi	r25, 0x8E	; 142
 a06:	87 2f       	mov	r24, r23
 a08:	76 2f       	mov	r23, r22
 a0a:	05 c0       	rjmp	.+10     	; 0xa16 <__floatsisf+0x5e>
 a0c:	66 23       	and	r22, r22
 a0e:	71 f0       	breq	.+28     	; 0xa2c <__floatsisf+0x74>
 a10:	96 e8       	ldi	r25, 0x86	; 134
 a12:	86 2f       	mov	r24, r22
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	60 e0       	ldi	r22, 0x00	; 0
 a18:	2a f0       	brmi	.+10     	; 0xa24 <__floatsisf+0x6c>
 a1a:	9a 95       	dec	r25
 a1c:	66 0f       	add	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	88 1f       	adc	r24, r24
 a22:	da f7       	brpl	.-10     	; 0xa1a <__floatsisf+0x62>
 a24:	88 0f       	add	r24, r24
 a26:	96 95       	lsr	r25
 a28:	87 95       	ror	r24
 a2a:	97 f9       	bld	r25, 7
 a2c:	08 95       	ret

00000a2e <__fp_cmp>:
 a2e:	99 0f       	add	r25, r25
 a30:	00 08       	sbc	r0, r0
 a32:	55 0f       	add	r21, r21
 a34:	aa 0b       	sbc	r26, r26
 a36:	e0 e8       	ldi	r30, 0x80	; 128
 a38:	fe ef       	ldi	r31, 0xFE	; 254
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	e8 07       	cpc	r30, r24
 a40:	f9 07       	cpc	r31, r25
 a42:	c0 f0       	brcs	.+48     	; 0xa74 <__fp_cmp+0x46>
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	e4 07       	cpc	r30, r20
 a4a:	f5 07       	cpc	r31, r21
 a4c:	98 f0       	brcs	.+38     	; 0xa74 <__fp_cmp+0x46>
 a4e:	62 1b       	sub	r22, r18
 a50:	73 0b       	sbc	r23, r19
 a52:	84 0b       	sbc	r24, r20
 a54:	95 0b       	sbc	r25, r21
 a56:	39 f4       	brne	.+14     	; 0xa66 <__fp_cmp+0x38>
 a58:	0a 26       	eor	r0, r26
 a5a:	61 f0       	breq	.+24     	; 0xa74 <__fp_cmp+0x46>
 a5c:	23 2b       	or	r18, r19
 a5e:	24 2b       	or	r18, r20
 a60:	25 2b       	or	r18, r21
 a62:	21 f4       	brne	.+8      	; 0xa6c <__fp_cmp+0x3e>
 a64:	08 95       	ret
 a66:	0a 26       	eor	r0, r26
 a68:	09 f4       	brne	.+2      	; 0xa6c <__fp_cmp+0x3e>
 a6a:	a1 40       	sbci	r26, 0x01	; 1
 a6c:	a6 95       	lsr	r26
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	81 1d       	adc	r24, r1
 a72:	81 1d       	adc	r24, r1
 a74:	08 95       	ret

00000a76 <__fp_split3>:
 a76:	57 fd       	sbrc	r21, 7
 a78:	90 58       	subi	r25, 0x80	; 128
 a7a:	44 0f       	add	r20, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	59 f0       	breq	.+22     	; 0xa96 <__fp_splitA+0x10>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	71 f0       	breq	.+28     	; 0xaa0 <__fp_splitA+0x1a>
 a84:	47 95       	ror	r20

00000a86 <__fp_splitA>:
 a86:	88 0f       	add	r24, r24
 a88:	97 fb       	bst	r25, 7
 a8a:	99 1f       	adc	r25, r25
 a8c:	61 f0       	breq	.+24     	; 0xaa6 <__fp_splitA+0x20>
 a8e:	9f 3f       	cpi	r25, 0xFF	; 255
 a90:	79 f0       	breq	.+30     	; 0xab0 <__fp_splitA+0x2a>
 a92:	87 95       	ror	r24
 a94:	08 95       	ret
 a96:	12 16       	cp	r1, r18
 a98:	13 06       	cpc	r1, r19
 a9a:	14 06       	cpc	r1, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <__fp_split3+0xe>
 aa0:	46 95       	lsr	r20
 aa2:	f1 df       	rcall	.-30     	; 0xa86 <__fp_splitA>
 aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__fp_splitA+0x30>
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	99 1f       	adc	r25, r25
 aae:	f1 cf       	rjmp	.-30     	; 0xa92 <__fp_splitA+0xc>
 ab0:	86 95       	lsr	r24
 ab2:	71 05       	cpc	r23, r1
 ab4:	61 05       	cpc	r22, r1
 ab6:	08 94       	sec
 ab8:	08 95       	ret

00000aba <__fp_zero>:
 aba:	e8 94       	clt

00000abc <__fp_szero>:
 abc:	bb 27       	eor	r27, r27
 abe:	66 27       	eor	r22, r22
 ac0:	77 27       	eor	r23, r23
 ac2:	cb 01       	movw	r24, r22
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret

00000ac8 <__gesf2>:
 ac8:	b2 df       	rcall	.-156    	; 0xa2e <__fp_cmp>
 aca:	08 f4       	brcc	.+2      	; 0xace <__gesf2+0x6>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	08 95       	ret

00000ad0 <__mulsf3>:
 ad0:	0b d0       	rcall	.+22     	; 0xae8 <__mulsf3x>
 ad2:	78 c0       	rjmp	.+240    	; 0xbc4 <__fp_round>
 ad4:	69 d0       	rcall	.+210    	; 0xba8 <__fp_pscA>
 ad6:	28 f0       	brcs	.+10     	; 0xae2 <__mulsf3+0x12>
 ad8:	6e d0       	rcall	.+220    	; 0xbb6 <__fp_pscB>
 ada:	18 f0       	brcs	.+6      	; 0xae2 <__mulsf3+0x12>
 adc:	95 23       	and	r25, r21
 ade:	09 f0       	breq	.+2      	; 0xae2 <__mulsf3+0x12>
 ae0:	5a c0       	rjmp	.+180    	; 0xb96 <__fp_inf>
 ae2:	5f c0       	rjmp	.+190    	; 0xba2 <__fp_nan>
 ae4:	11 24       	eor	r1, r1
 ae6:	ea cf       	rjmp	.-44     	; 0xabc <__fp_szero>

00000ae8 <__mulsf3x>:
 ae8:	c6 df       	rcall	.-116    	; 0xa76 <__fp_split3>
 aea:	a0 f3       	brcs	.-24     	; 0xad4 <__mulsf3+0x4>

00000aec <__mulsf3_pse>:
 aec:	95 9f       	mul	r25, r21
 aee:	d1 f3       	breq	.-12     	; 0xae4 <__mulsf3+0x14>
 af0:	95 0f       	add	r25, r21
 af2:	50 e0       	ldi	r21, 0x00	; 0
 af4:	55 1f       	adc	r21, r21
 af6:	62 9f       	mul	r22, r18
 af8:	f0 01       	movw	r30, r0
 afa:	72 9f       	mul	r23, r18
 afc:	bb 27       	eor	r27, r27
 afe:	f0 0d       	add	r31, r0
 b00:	b1 1d       	adc	r27, r1
 b02:	63 9f       	mul	r22, r19
 b04:	aa 27       	eor	r26, r26
 b06:	f0 0d       	add	r31, r0
 b08:	b1 1d       	adc	r27, r1
 b0a:	aa 1f       	adc	r26, r26
 b0c:	64 9f       	mul	r22, r20
 b0e:	66 27       	eor	r22, r22
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	66 1f       	adc	r22, r22
 b16:	82 9f       	mul	r24, r18
 b18:	22 27       	eor	r18, r18
 b1a:	b0 0d       	add	r27, r0
 b1c:	a1 1d       	adc	r26, r1
 b1e:	62 1f       	adc	r22, r18
 b20:	73 9f       	mul	r23, r19
 b22:	b0 0d       	add	r27, r0
 b24:	a1 1d       	adc	r26, r1
 b26:	62 1f       	adc	r22, r18
 b28:	83 9f       	mul	r24, r19
 b2a:	a0 0d       	add	r26, r0
 b2c:	61 1d       	adc	r22, r1
 b2e:	22 1f       	adc	r18, r18
 b30:	74 9f       	mul	r23, r20
 b32:	33 27       	eor	r19, r19
 b34:	a0 0d       	add	r26, r0
 b36:	61 1d       	adc	r22, r1
 b38:	23 1f       	adc	r18, r19
 b3a:	84 9f       	mul	r24, r20
 b3c:	60 0d       	add	r22, r0
 b3e:	21 1d       	adc	r18, r1
 b40:	82 2f       	mov	r24, r18
 b42:	76 2f       	mov	r23, r22
 b44:	6a 2f       	mov	r22, r26
 b46:	11 24       	eor	r1, r1
 b48:	9f 57       	subi	r25, 0x7F	; 127
 b4a:	50 40       	sbci	r21, 0x00	; 0
 b4c:	8a f0       	brmi	.+34     	; 0xb70 <__mulsf3_pse+0x84>
 b4e:	e1 f0       	breq	.+56     	; 0xb88 <__mulsf3_pse+0x9c>
 b50:	88 23       	and	r24, r24
 b52:	4a f0       	brmi	.+18     	; 0xb66 <__mulsf3_pse+0x7a>
 b54:	ee 0f       	add	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	bb 1f       	adc	r27, r27
 b5a:	66 1f       	adc	r22, r22
 b5c:	77 1f       	adc	r23, r23
 b5e:	88 1f       	adc	r24, r24
 b60:	91 50       	subi	r25, 0x01	; 1
 b62:	50 40       	sbci	r21, 0x00	; 0
 b64:	a9 f7       	brne	.-22     	; 0xb50 <__mulsf3_pse+0x64>
 b66:	9e 3f       	cpi	r25, 0xFE	; 254
 b68:	51 05       	cpc	r21, r1
 b6a:	70 f0       	brcs	.+28     	; 0xb88 <__mulsf3_pse+0x9c>
 b6c:	14 c0       	rjmp	.+40     	; 0xb96 <__fp_inf>
 b6e:	a6 cf       	rjmp	.-180    	; 0xabc <__fp_szero>
 b70:	5f 3f       	cpi	r21, 0xFF	; 255
 b72:	ec f3       	brlt	.-6      	; 0xb6e <__mulsf3_pse+0x82>
 b74:	98 3e       	cpi	r25, 0xE8	; 232
 b76:	dc f3       	brlt	.-10     	; 0xb6e <__mulsf3_pse+0x82>
 b78:	86 95       	lsr	r24
 b7a:	77 95       	ror	r23
 b7c:	67 95       	ror	r22
 b7e:	b7 95       	ror	r27
 b80:	f7 95       	ror	r31
 b82:	e7 95       	ror	r30
 b84:	9f 5f       	subi	r25, 0xFF	; 255
 b86:	c1 f7       	brne	.-16     	; 0xb78 <__mulsf3_pse+0x8c>
 b88:	fe 2b       	or	r31, r30
 b8a:	88 0f       	add	r24, r24
 b8c:	91 1d       	adc	r25, r1
 b8e:	96 95       	lsr	r25
 b90:	87 95       	ror	r24
 b92:	97 f9       	bld	r25, 7
 b94:	08 95       	ret

00000b96 <__fp_inf>:
 b96:	97 f9       	bld	r25, 7
 b98:	9f 67       	ori	r25, 0x7F	; 127
 b9a:	80 e8       	ldi	r24, 0x80	; 128
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	08 95       	ret

00000ba2 <__fp_nan>:
 ba2:	9f ef       	ldi	r25, 0xFF	; 255
 ba4:	80 ec       	ldi	r24, 0xC0	; 192
 ba6:	08 95       	ret

00000ba8 <__fp_pscA>:
 ba8:	00 24       	eor	r0, r0
 baa:	0a 94       	dec	r0
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	18 06       	cpc	r1, r24
 bb2:	09 06       	cpc	r0, r25
 bb4:	08 95       	ret

00000bb6 <__fp_pscB>:
 bb6:	00 24       	eor	r0, r0
 bb8:	0a 94       	dec	r0
 bba:	12 16       	cp	r1, r18
 bbc:	13 06       	cpc	r1, r19
 bbe:	14 06       	cpc	r1, r20
 bc0:	05 06       	cpc	r0, r21
 bc2:	08 95       	ret

00000bc4 <__fp_round>:
 bc4:	09 2e       	mov	r0, r25
 bc6:	03 94       	inc	r0
 bc8:	00 0c       	add	r0, r0
 bca:	11 f4       	brne	.+4      	; 0xbd0 <__fp_round+0xc>
 bcc:	88 23       	and	r24, r24
 bce:	52 f0       	brmi	.+20     	; 0xbe4 <__fp_round+0x20>
 bd0:	bb 0f       	add	r27, r27
 bd2:	40 f4       	brcc	.+16     	; 0xbe4 <__fp_round+0x20>
 bd4:	bf 2b       	or	r27, r31
 bd6:	11 f4       	brne	.+4      	; 0xbdc <__fp_round+0x18>
 bd8:	60 ff       	sbrs	r22, 0
 bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__fp_round+0x20>
 bdc:	6f 5f       	subi	r22, 0xFF	; 255
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	08 95       	ret

00000be6 <__udivmodhi4>:
 be6:	aa 1b       	sub	r26, r26
 be8:	bb 1b       	sub	r27, r27
 bea:	51 e1       	ldi	r21, 0x11	; 17
 bec:	07 c0       	rjmp	.+14     	; 0xbfc <__udivmodhi4_ep>

00000bee <__udivmodhi4_loop>:
 bee:	aa 1f       	adc	r26, r26
 bf0:	bb 1f       	adc	r27, r27
 bf2:	a6 17       	cp	r26, r22
 bf4:	b7 07       	cpc	r27, r23
 bf6:	10 f0       	brcs	.+4      	; 0xbfc <__udivmodhi4_ep>
 bf8:	a6 1b       	sub	r26, r22
 bfa:	b7 0b       	sbc	r27, r23

00000bfc <__udivmodhi4_ep>:
 bfc:	88 1f       	adc	r24, r24
 bfe:	99 1f       	adc	r25, r25
 c00:	5a 95       	dec	r21
 c02:	a9 f7       	brne	.-22     	; 0xbee <__udivmodhi4_loop>
 c04:	80 95       	com	r24
 c06:	90 95       	com	r25
 c08:	bc 01       	movw	r22, r24
 c0a:	cd 01       	movw	r24, r26
 c0c:	08 95       	ret

00000c0e <_exit>:
 c0e:	f8 94       	cli

00000c10 <__stop_program>:
 c10:	ff cf       	rjmp	.-2      	; 0xc10 <__stop_program>
