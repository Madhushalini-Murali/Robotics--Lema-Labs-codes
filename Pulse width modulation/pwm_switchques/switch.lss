
switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007b  00000000  00000000  00000117  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004a  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000092  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
	DDRD=0b00000000; //port D input (TO CONNECT SWITCH)
  6c:	11 ba       	out	0x11, r1	; 17
	DDRA=0b11111111;  //port A output
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	PORTD=0b11111111;	//port D pull up
  72:	82 bb       	out	0x12, r24	; 18
	  {
			PORTA=0b00000000;
	  }
	else
	{
		PORTA=0b00000001;
  74:	91 e0       	ldi	r25, 0x01	; 1
	DDRA=0b11111111;  //port A output
	PORTD=0b11111111;	//port D pull up
	int c;
	while(1)
	{
	  c=PIND;
  76:	80 b3       	in	r24, 0x10	; 16
	  if(c==0b11111110)
  78:	8e 3f       	cpi	r24, 0xFE	; 254
  7a:	11 f4       	brne	.+4      	; 0x80 <main+0x14>
	  {
			PORTA=0b00000000;
  7c:	1b ba       	out	0x1b, r1	; 27
  7e:	fb cf       	rjmp	.-10     	; 0x76 <main+0xa>
	  }
	else
	{
		PORTA=0b00000001;
  80:	9b bb       	out	0x1b, r25	; 27
  82:	f9 cf       	rjmp	.-14     	; 0x76 <main+0xa>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
